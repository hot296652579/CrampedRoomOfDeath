{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Scene/UIBattleScene.ts"],"names":["Component","_decorator","DIRECTION_ENUM","ENITIY_TYPE_ENUM","ENITIY_TYPE_SPIKES_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","levels","EventMgr","BurstMgr","DoorMgr","IronMgr","WoodenMgr","PlayerMrg","DataManager","SpikesMgr","TileMapManager","createNewNode","TILE_WIDTH","TILE_HEIGHT","ccclass","property","UIBattleScene","level","stage","start","generateStage","initLevel","onLoad","Instance","addEventListen","ENUM_NEXTLEVEL","nextLevelMap","onDestry","unEventListen","clearLevelMap","levelIndex","mapInfo","mapColumCount","length","mapRowCount","generateTileMap","generateSpikes","generateDoor","generatePlayer","fitPos","removeAllChildren","reset","stageNode","setParent","node","tileMapNode","tileMapManager","addComponent","init","playerNode","playerManager","x","y","type","PLAYER","state","IDLE","direction","BOTTOM","playerInfo","emit","ENUM_PLAYER_BORN","generateWooden","woodenNode","woodenManager","WOODEN","TOP","enemies","push","generateBurst","burstNode","burstManager","BURST","bursts","spikesNode","spikesManager","SPIKES_FOUR","count","spikes","generateIron","ironNode","ironManager","doorNode","doorManager","doorInfo","disX","disY","setPosition"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node } from \"cc\";\nimport { DIRECTION_ENUM, ENITIY_TYPE_ENUM, ENITIY_TYPE_SPIKES_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT } from \"../../Enum\";\nimport levels, { ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport { BurstMgr } from \"../Burst/BurstMgr\";\nimport { DoorMgr } from \"../Door/DoorMgr\";\nimport { IronMgr } from \"../Enemy/Iron/IronMgr\";\nimport { WoodenMgr } from \"../Enemy/Wooden/WoodenMgr\";\nimport { PlayerMrg } from \"../Player/PlayerMgr\";\nimport DataManager from \"../Runtime/DataManager\";\nimport { SpikesMgr } from \"../Spikes/SpikesMgr\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\n\nconst TILE_WIDTH = 55\nconst TILE_HEIGHT = 55\nconst { ccclass, property } = _decorator;\n@ccclass('UIBattleScene')\nexport class UIBattleScene extends Component {\n    level: ILevel\n    stage: Node\n    start() {\n        this.generateStage()\n        this.initLevel()\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap)\n    }\n\n    initLevel() {\n        this.clearLevelMap()\n        const level = levels[`level${DataManager.Instance.levelIndex}`]\n        if (level) {\n            DataManager.Instance.mapInfo = level.mapInfo\n            DataManager.Instance.mapColumCount = level.mapInfo[0].length //åˆ—\n            DataManager.Instance.mapRowCount = level.mapInfo.length\n        }\n\n        this.generateTileMap()\n        // this.generateBurst()\n        // this.generateWooden()\n        // this.generateIron()\n        this.generateSpikes()\n        this.generateDoor()\n        this.generatePlayer()\n        this.fitPos()\n    }\n\n    nextLevelMap() {\n        DataManager.Instance.levelIndex++\n        this.initLevel()\n    }\n\n    clearLevelMap() {\n        this.stage.removeAllChildren()\n        DataManager.Instance.reset()\n    }\n\n    generateStage() {\n        const stageNode = createNewNode()\n        stageNode.setParent(this.node)\n        this.stage = stageNode\n    }\n\n    async generateTileMap() {\n        const tileMapNode = createNewNode()\n        tileMapNode.setParent(this.stage)\n        const tileMapManager = tileMapNode.addComponent(TileMapManager)\n        await tileMapManager.init()\n    }\n\n    async generatePlayer() {\n        const playerNode = createNewNode()\n        playerNode.setParent(this.stage)\n        const playerManager = playerNode.addComponent(PlayerMrg)\n        await playerManager.init({\n            x: 7,\n            y: 2,\n            type: ENITIY_TYPE_ENUM.PLAYER,\n            state: ENTITY_STATE_ENUM.IDLE,\n            direction: DIRECTION_ENUM.BOTTOM\n        })\n        DataManager.Instance.playerInfo = playerManager\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_PLAYER_BORN)\n    }\n\n    async generateWooden() {\n        const woodenNode = createNewNode()\n        woodenNode.setParent(this.stage)\n        const woodenManager = woodenNode.addComponent(WoodenMgr)\n        await woodenManager.init({\n            x: 7,\n            y: 7,\n            type: ENITIY_TYPE_ENUM.WOODEN,\n            state: ENTITY_STATE_ENUM.IDLE,\n            direction: DIRECTION_ENUM.TOP\n        })\n        DataManager.Instance.enemies.push(woodenManager)\n    }\n\n    async generateBurst() {\n        const burstNode = createNewNode()\n        burstNode.setParent(this.stage)\n        const burstManager = burstNode.addComponent(BurstMgr)\n        await burstManager.init({\n            x: 7,\n            y: 5,\n            type: ENITIY_TYPE_ENUM.BURST,\n            state: ENTITY_STATE_ENUM.IDLE,\n            direction: DIRECTION_ENUM.TOP\n        })\n        DataManager.Instance.bursts.push(burstManager)\n    }\n\n    async generateSpikes() {\n        const spikesNode = createNewNode()\n        spikesNode.setParent(this.stage)\n        const spikesManager = spikesNode.addComponent(SpikesMgr)\n        await spikesManager.init({\n            x: 7,\n            y: 5,\n            type: ENITIY_TYPE_SPIKES_ENUM.SPIKES_FOUR,\n            count: 0\n        })\n        DataManager.Instance.spikes.push(spikesManager)\n    }\n\n    async generateIron() {\n        const ironNode = createNewNode()\n        ironNode.setParent(this.stage)\n        const ironManager = ironNode.addComponent(IronMgr)\n        await ironManager.init({\n            x: 2,\n            y: 4,\n            type: ENITIY_TYPE_ENUM.WOODEN,\n            state: ENTITY_STATE_ENUM.IDLE,\n            direction: DIRECTION_ENUM.BOTTOM\n        })\n        DataManager.Instance.enemies.push(ironManager)\n    }\n\n    async generateDoor() {\n        const doorNode = createNewNode()\n        doorNode.setParent(this.stage)\n        const doorManager = doorNode.addComponent(DoorMgr)\n        await doorManager.init()\n        DataManager.Instance.doorInfo = doorManager\n    }\n\n    fitPos() {\n        const { mapColumCount, mapRowCount } = DataManager.Instance\n        const disX = TILE_WIDTH * mapRowCount / 2\n        const disY = TILE_HEIGHT * mapColumCount / 2 + 100\n        this.stage.setPosition(-disX, disY)\n    }\n}"]}