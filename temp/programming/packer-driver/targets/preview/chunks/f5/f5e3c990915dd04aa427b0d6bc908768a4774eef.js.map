{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Player/PlayerMgr.ts"],"names":["_decorator","DIRECTION_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","ENUM_BOTTOM_CONTROLLER","SHAKE_TYPE_ENUM","EventMgr","DataManager","PlayerStateMachine","EnitiyMgr","AudioMgr","MOVE_SPEED","ccclass","property","PlayerMrg","targetX","targetY","isMoving","init","params","fsm","addComponent","x","y","onLoad","Instance","addEventListen","ENUM_MOVE_PLAYER","inputHanlder","ENUM_PLAYER_DEATH","onDeathHanlder","onDestry","onDestroy","unEventListen","update","updateXY","Math","abs","emit","ENUM_MOVE_END","inputDirection","state","DEATH","AIRDEATH","ATTACK","enemyId","willAttack","inst","playOneShot","ENUM_ENEMY_DEATH","ENUM_OPEN_DOOR","ENUM_RECORD_STEP","willBlock","TOP","ENUM_SHAKE_SCREEN","BOTTOM","LEFT","RIGHT","TURNLEFT","direction","TURNRIGHT","handlerMove","type","tileMgrInfo","enemies","filter","enemy","doorX","doorY","doorState","doorInfo","bursts","burst","mapRowCount","row","mapColumCount","column","playerNextY","BLOCKFRONT","weaponNextY","nextPlayerTile","nextWeaponTile","i","length","enemyX","enemyY","some","canTurn","canMove","BLOCKBACK","BLOCKRIGHT","weaponNextX","BLOCKLEFT","playerNextX","nextY","nextX","BLOCKTURNLEFT","BLOCKTURNRIGHT","index","id","onSmokeHandler","ENUM_SHOW_SMOKE","onAttackShake"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node, Sprite, UITransform, Animation, SpriteAtlas, AnimationClip, animation, SpriteFrame, Texture2D, math } from \"cc\";\nimport { DIRECTION_ENUM, DIRECTION_ORDER_ENUM, ENITIY_TYPE_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT, ENUM_BOTTOM_CONTROLLER, PARAMS_NAME_TYPE, SHAKE_TYPE_ENUM } from \"../../Enum\";\nimport levels, { IEnitiy, ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport ResourceLoadMgr from \"../Base/ResourceLoadMgr\";\nimport DataManager from \"../Runtime/DataManager\";\nimport { TILE_HEIGHT, TILE_WIDTH } from \"../TileMap/TileManager\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\nimport { PlayerStateMachine } from \"./PlayerStateMachine\";\nimport { EnitiyMgr } from \"../Base/EnitiyMgr\";\nimport { EnemyMgr } from \"../Base/EnemyMgr\";\nimport { BurstMgr } from \"../Burst/BurstMgr\";\nimport SoundMgr from \"../Runtime/SoundMgr\";\nimport { AudioMgr } from \"../Runtime/AudioMgr\";\n\nexport const MOVE_SPEED = 1 / 10\n\nconst { ccclass, property } = _decorator;\n@ccclass('PlayerMrg')\nexport class PlayerMrg extends EnitiyMgr {\n\n    targetX: number = 0\n    targetY: number = 0\n    isMoving: boolean = false\n\n    async init(params: IEnitiy) {\n        this.fsm = this.addComponent(PlayerStateMachine)\n        await this.fsm.init()\n\n        super.init(params)\n\n        this.targetX = this.x\n        this.targetY = this.y\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_PLAYER, this.inputHanlder, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_PLAYER_DEATH, this.onDeathHanlder, this)\n    }\n\n    onDestry() {\n        super.onDestroy()\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_PLAYER, this.inputHanlder)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_PLAYER_DEATH, this.onDeathHanlder)\n    }\n\n    update() {\n        this.updateXY()\n        super.update()\n    }\n\n    updateXY() {\n        if (this.targetX < this.x) {\n            this.x -= MOVE_SPEED\n        } else if (this.targetX > this.x) {\n            this.x += MOVE_SPEED\n        } else if (this.targetY < this.y) {\n            this.y -= MOVE_SPEED\n        } else if (this.targetY > this.y) {\n            this.y += MOVE_SPEED\n        }\n\n        if (Math.abs(this.targetX - this.x) <= 0.01 && Math.abs(this.targetY - this.y) <= 0.01 && this.isMoving) {\n            this.x = this.targetX\n            this.y = this.targetY\n            this.isMoving = false\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n        }\n    }\n\n    inputHanlder(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        if (this.state === ENTITY_STATE_ENUM.DEATH || this.state === ENTITY_STATE_ENUM.AIRDEATH || this.state === ENTITY_STATE_ENUM.ATTACK)\n            return\n\n        if (this.isMoving)\n            return\n\n\n        const enemyId = this.willAttack(inputDirection)\n        if (enemyId) {\n            AudioMgr.inst.playOneShot('sound/attack')\n            this.state = ENTITY_STATE_ENUM.ATTACK\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_ENEMY_DEATH, enemyId)\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_OPEN_DOOR)\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_RECORD_STEP)\n            return\n        }\n\n        if (this.willBlock(inputDirection)) {\n            if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.TOP)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.BOTTOM)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.LEFT) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.LEFT)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.RIGHT) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.RIGHT)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT && this.direction === DIRECTION_ENUM.TOP) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.LEFT)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT && this.direction === DIRECTION_ENUM.LEFT) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.BOTTOM)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT && this.direction === DIRECTION_ENUM.BOTTOM) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.RIGHT)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT && this.direction === DIRECTION_ENUM.RIGHT) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.TOP)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT && this.direction === DIRECTION_ENUM.TOP) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.RIGHT)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT && this.direction === DIRECTION_ENUM.LEFT) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.TOP)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT && this.direction === DIRECTION_ENUM.BOTTOM) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.LEFT)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT && this.direction === DIRECTION_ENUM.RIGHT) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.BOTTOM)\n            }\n            return\n        }\n\n        this.handlerMove(inputDirection)\n    }\n\n    onDeathHanlder(type: ENTITY_STATE_ENUM) {\n        this.state = type\n        AudioMgr.inst.playOneShot('sound/death')\n    }\n\n    willBlock(type: ENUM_BOTTOM_CONTROLLER) {\n        const { targetX: x, targetY: y, direction } = this\n        const { tileMgrInfo } = DataManager.Instance\n        const enemies: EnemyMgr[] = DataManager.Instance.enemies.filter(\n            (enemy: EnemyMgr) => enemy.state !== ENTITY_STATE_ENUM.DEATH,\n        )\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo || {}\n        const bursts: BurstMgr[] = DataManager.Instance.bursts.filter(\n            (burst: BurstMgr) => burst.state !== ENTITY_STATE_ENUM.DEATH,\n        )\n\n        const { mapRowCount: row, mapColumCount: column } = DataManager.Instance\n\n        //按钮方向——向上\n        if (type === ENUM_BOTTOM_CONTROLLER.TOP) {\n            const playerNextY = y - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextY < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const weaponNextY = y - 2\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === x && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                // 判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === x && enemyY === weaponNextY) || (enemyX === x && enemyY === playerNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextY < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === x && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if (enemyX === x && enemyY === playerNextY) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextY < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === x && enemyY === playerNextY) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextY < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === x && enemyY === playerNextY) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                        return true\n                    }\n                }\n\n                // 判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n            }\n\n            //按钮方向——向下\n        } else if (type === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n            const playerNextY = y + 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextY > column - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === x && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if (enemyX === x && enemyY === playerNextY) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                        return true\n                    }\n                }\n\n                // 判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextY > column - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextY = y + 2\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === x && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                // 判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === x && enemyY === weaponNextY) || (enemyX === x && enemyY === playerNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextY > column - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === x && enemyY === playerNextY) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextY > column - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === x && doorY === playerNextY) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === x && enemyY === playerNextY) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === x && burst.y === playerNextY) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n            }\n\n            //按钮方向——向左\n        } else if (type === ENUM_BOTTOM_CONTROLLER.LEFT) {\n            const playerNextX = x - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextX < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextX < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextX < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x - 2\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === y)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === y)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextX < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === y)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if (enemyX === playerNextX && enemyY === y) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n            }\n\n            //按钮方向——向右\n        } else if (type === ENUM_BOTTOM_CONTROLLER.RIGHT) {\n            const playerNextX = x + 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextX > row - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextX > row - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === weaponNextY)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextX > row - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === y)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if (enemyX === playerNextX && enemyY === y) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextX > row - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x + 2\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //判断门\n                if (\n                    ((doorX === playerNextX && doorY === y) || (doorX === weaponNextX && doorY === y)) &&\n                    doorState !== ENTITY_STATE_ENUM.DEATH\n                ) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //判断敌人\n                for (let i = 0; i < enemies.length; i++) {\n                    const enemy = enemies[i]\n                    const { x: enemyX, y: enemyY } = enemy\n\n                    if ((enemyX === playerNextX && enemyY === y) || (enemyX === weaponNextX && enemyY === y)) {\n                        this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                        return true\n                    }\n                }\n\n                //判断地裂陷阱\n                if (\n                    bursts.some(burst => burst.x === playerNextX && burst.y === y) &&\n                    (!nextWeaponTile || nextWeaponTile.canTurn)\n                ) {\n                    return false\n                }\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n            }\n\n            //按钮方向——左转\n        } else if (type === ENUM_BOTTOM_CONTROLLER.TURNLEFT) {\n            let nextY, nextX\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上左转的话，左上角三个tile都必须turnable为true，并且没有敌人\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y - 1\n                nextX = x + 1\n            }\n\n            //判断门\n            if (\n                ((doorX === x && doorY === nextY) ||\n                    (doorX === nextX && doorY === y) ||\n                    (doorX === nextX && doorY === nextY)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n                return true\n            }\n\n            //判断敌人\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if (enemyX === nextX && enemyY === y) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                } else if (enemyX === nextX && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                } else if (enemyX === x && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                }\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileMgrInfo[x]?.[nextY] || tileMgrInfo[x]?.[nextY].canTurn) &&\n                (!tileMgrInfo[nextX]?.[y] || tileMgrInfo[nextX]?.[y].canTurn) &&\n                (!tileMgrInfo[nextX]?.[nextY] || tileMgrInfo[nextX]?.[nextY].canTurn)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n                return true\n            }\n\n            //按钮方向——右转\n        } else if (type === ENUM_BOTTOM_CONTROLLER.TURNRIGHT) {\n            let nextX, nextY\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上右转的话，右上角三个tile都必须turnable为true\n                nextY = y - 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y + 1\n                nextX = x + 1\n            }\n\n            //判断门\n            if (\n                ((doorX === x && doorY === nextY) ||\n                    (doorX === nextX && doorY === y) ||\n                    (doorX === nextX && doorY === nextY)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n                return true\n            }\n\n            //判断敌人\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if (enemyX === nextX && enemyY === y) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                } else if (enemyX === nextX && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                } else if (enemyX === x && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                }\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileMgrInfo[x]?.[nextY] || tileMgrInfo[x]?.[nextY].canTurn) &&\n                (!tileMgrInfo[nextX]?.[y] || tileMgrInfo[nextX]?.[y].canTurn) &&\n                (!tileMgrInfo[nextX]?.[nextY] || tileMgrInfo[nextX]?.[nextY].canTurn)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n                return true\n            }\n        }\n\n        return false\n    }\n\n    // checkCollisionDoor(playerNext, weaponNext, state: ENTITY_STATE_ENUM, inputDirection: ENUM_BOTTOM_CONTROLLER) {\n    //     const { targetX: x, targetY: y, direction } = this\n    //     const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo\n\n    //     if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP || inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n    //         //判断上下门\n    //         if (\n    //             ((doorX === x && doorY === playerNext) || (doorX === x && doorY === weaponNext)) &&\n    //             doorState !== ENTITY_STATE_ENUM.DEATH\n    //         ) {\n    //             this.state = state\n    //             console.log('撞到了门')\n    //             return true\n    //         }\n    //     } else {\n    //         //判断左右门\n    //         if (\n    //             ((doorX === playerNext && doorY === y) || (doorX === weaponNext && doorY === weaponNext)) &&\n    //             doorState !== ENTITY_STATE_ENUM.DEATH\n    //         ) {\n    //             this.state = state\n    //             console.log('撞到了门')\n    //             return true\n    //         }\n    //     }\n\n\n\n    //     return false\n    // }\n\n    // checkCollisionEnenies(playerNext, weaponNext, state: ENTITY_STATE_ENUM, inputDirection: ENUM_BOTTOM_CONTROLLER) {\n    //     const { targetX: x, targetY: y, direction } = this\n    //     const enemies: EnemyMgr[] = DataManager.Instance.enemies.filter(enemy => enemy.state != ENTITY_STATE_ENUM.DEATH)\n\n    //     if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP || inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n    //         for (let i = 0; i < enemies.length; i++) {\n    //             const enemy = enemies[i]\n    //             const { x: enemyX, y: enemyY } = enemy\n\n    //             if ((enemyX === x && enemyY === weaponNext) || (enemyX === x && enemyY === playerNext)) {\n    //                 this.state = state\n    //                 console.log('撞到了敌人')\n    //                 return true\n    //             }\n    //         }\n    //     }\n\n    //     return false\n    // }\n\n    // //判断地裂陷阱\n    // checkBurstCollision(playerNext, nextWeaponTile, inputDirection: ENUM_BOTTOM_CONTROLLER) {\n    //     const { targetX: x, targetY: y, direction } = this\n    //     const bursts: BurstMgr[] = DataManager.Instance.bursts.filter(\n    //         (burst: BurstMgr) => burst.state !== ENTITY_STATE_ENUM.DEATH,\n    //     )\n\n    //     if (\n    //         bursts.some(burst => burst.x === x && burst.y === playerNext) &&\n    //         (!nextWeaponTile || nextWeaponTile.canTurn)\n    //     ) {\n    //         return false\n    //     }\n    // }\n\n    willAttack(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        // let enemies = DataManager.Instance.enemies.filter(enemy => enemy.state != ENTITY_STATE_ENUM.DEATH)\n        let enemies = DataManager.Instance.enemies.filter((enemy) => { return enemy.state != ENTITY_STATE_ENUM.DEATH })\n\n        for (let index = 0; index < enemies.length; index++) {\n            const { x: enemyX, y: enemyY, id } = enemies[index];\n            if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP && this.direction === DIRECTION_ENUM.TOP && enemyX == this.x && enemyY == this.y - 2) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM && this.direction === DIRECTION_ENUM.BOTTOM && enemyX == this.x && enemyY == this.y + 2) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.LEFT && this.direction === DIRECTION_ENUM.LEFT && enemyX == this.x - 2 && enemyY == this.y) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.RIGHT && this.direction === DIRECTION_ENUM.RIGHT && enemyX == this.x + 2 && enemyY == this.y) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            }\n        }\n\n        return ''\n    }\n\n    handlerMove(direction: ENUM_BOTTOM_CONTROLLER) {\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_RECORD_STEP)\n        switch (direction) {\n            case ENUM_BOTTOM_CONTROLLER.TOP:\n                this.isMoving = true\n                this.onSmokeHandler(direction)\n                this.targetY -= 1\n                AudioMgr.inst.playOneShot('sound/move')\n                break;\n            case ENUM_BOTTOM_CONTROLLER.BOTTOM:\n                this.isMoving = true\n                this.onSmokeHandler(direction)\n                this.targetY += 1\n                AudioMgr.inst.playOneShot('sound/move')\n                break;\n            case ENUM_BOTTOM_CONTROLLER.LEFT:\n                this.isMoving = true\n                this.onSmokeHandler(direction)\n                this.targetX -= 1\n                AudioMgr.inst.playOneShot('sound/move')\n                break;\n            case ENUM_BOTTOM_CONTROLLER.RIGHT:\n                this.isMoving = true\n                this.onSmokeHandler(direction)\n                this.targetX += 1\n                AudioMgr.inst.playOneShot('sound/move')\n                break;\n            case ENUM_BOTTOM_CONTROLLER.TURNLEFT:\n                if (this.direction === DIRECTION_ENUM.TOP) {\n                    this.direction = DIRECTION_ENUM.LEFT\n                } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n                    this.direction = DIRECTION_ENUM.RIGHT\n                } else if (this.direction === DIRECTION_ENUM.LEFT) {\n                    this.direction = DIRECTION_ENUM.BOTTOM\n                } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n                    this.direction = DIRECTION_ENUM.TOP\n                }\n                this.state = ENTITY_STATE_ENUM.TURNLEFT\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n                break;\n            case ENUM_BOTTOM_CONTROLLER.TURNRIGHT:\n                if (this.direction === DIRECTION_ENUM.TOP) {\n                    this.direction = DIRECTION_ENUM.RIGHT\n                } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n                    this.direction = DIRECTION_ENUM.LEFT\n                } else if (this.direction === DIRECTION_ENUM.LEFT) {\n                    this.direction = DIRECTION_ENUM.TOP\n                } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n                    this.direction = DIRECTION_ENUM.BOTTOM\n                }\n                this.state = ENTITY_STATE_ENUM.TURNRIGHT\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n                break;\n        }\n    }\n\n    onSmokeHandler(type: ENUM_BOTTOM_CONTROLLER) {\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHOW_SMOKE, this.x, this.y, type)\n    }\n\n    onAttackShake(type: SHAKE_TYPE_ENUM) {\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, type)\n    }\n}"]}