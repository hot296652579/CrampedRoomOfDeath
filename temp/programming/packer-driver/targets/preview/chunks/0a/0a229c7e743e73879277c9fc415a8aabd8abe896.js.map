{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/TileMap/TileMapManager.ts"],"names":["Component","_decorator","resources","SpriteAtlas","DataManagerInstance","createNewNode","TileManager","ccclass","property","TileMapManager","start","init","spriteAtlas","loadRes","mapInfo","i","length","colnum","j","item","src","type","node","imgSrc","sp","spriteFrames","tileManager","addComponent","setParent","Promise","resolve","reject","load","err","atlas","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,U,OAAAA,U;AAAkBC,MAAAA,S,OAAAA,S;AAAqDC,MAAAA,W,OAAAA,W;;AAElFC,MAAAA,mB,iBAAAA,mB;;AACAC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,W,iBAAAA,W;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;gCAEjBQ,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb,SACoCT,SADpC,CAC8C;AAC1CU,QAAAA,KAAK,GAAG,CAEP;;AAEKC,QAAAA,IAAI,GAAG;AAAA;;AAAA;AACT,gBAAMC,WAAW,SAAS,KAAI,CAACC,OAAL,EAA1B;AACA,gBAAM;AAAEC,cAAAA;AAAF;AAAA;AAAA,0DAAN;;AAEA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,kBAAME,MAAM,GAAGH,OAAO,CAACC,CAAD,CAAtB;;AACA,mBAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,CAACD,MAA3B,EAAmCE,CAAC,EAApC,EAAwC;AACpC,oBAAMC,IAAI,GAAGF,MAAM,CAACC,CAAD,CAAnB;;AACA,oBAAIC,IAAI,CAACC,GAAL,KAAa,IAAb,IAAqBD,IAAI,CAACE,IAAL,KAAc,IAAvC,EAA6C;AACzC;AACH;;AAED,oBAAMC,IAAI,GAAG;AAAA;AAAA,qDAAb;AACA,oBAAMC,MAAM,cAAYJ,IAAI,CAACC,GAAjB,MAAZ;AACA,oBAAMI,EAAE,GAAGZ,WAAW,CAACa,YAAZ,CAAyBF,MAAzB,CAAX,CARoC,CASpC;;AAEA,oBAAMG,WAAW,GAAGJ,IAAI,CAACK,YAAL;AAAA;AAAA,+CAApB;AACAD,gBAAAA,WAAW,CAACf,IAAZ,CAAiBa,EAAjB,EAAqB;AAAET,kBAAAA,CAAF;AAAKG,kBAAAA;AAAL,iBAArB;AACAI,gBAAAA,IAAI,CAACM,SAAL,CAAe,KAAI,CAACN,IAApB;AACH;AACJ;AArBQ;AAsBZ;;AAEDT,QAAAA,OAAO,GAAG;AACN,iBAAO,IAAIgB,OAAJ,CAAyB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA7B,YAAAA,SAAS,CAAC8B,IAAV,CAAe,mBAAf,EAAoC7B,WAApC,EAAiD,CAAC8B,GAAD,EAAMC,KAAN,KAAgB;AAC7D,kBAAI,CAACD,GAAL,EAAU;AACNH,gBAAAA,OAAO,CAACI,KAAD,CAAP;AACA;AACH,eAHD,MAGO;AACHC,gBAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAF,gBAAAA,MAAM,CAAC,KAAD,CAAN;AACH;AACJ,aARD;AASH,WAnBM,CAAP;AAoBH;;AAlDyC,O","sourcesContent":["import { Component, _decorator, Node, resources, SpriteFrame, Sprite, UITransform, Layers, SpriteAtlas } from \"cc\";\nimport levels from \"../../Levels\";\nimport { DataManagerInstance } from \"../Runtime/DataManager\";\nimport { createNewNode } from \"../Utils\";\nimport { TileManager } from \"./TileManager\";\n\nconst { ccclass, property } = _decorator;\n@ccclass('TileMapManager')\nexport class TileMapManager extends Component {\n    start() {\n\n    }\n\n    async init() {\n        const spriteAtlas = await this.loadRes()\n        const { mapInfo } = DataManagerInstance\n\n        for (let i = 0; i < mapInfo.length; i++) {\n            const colnum = mapInfo[i];\n            for (let j = 0; j < colnum.length; j++) {\n                const item = colnum[j];\n                if (item.src === null || item.type === null) {\n                    continue\n                }\n\n                const node = createNewNode()\n                const imgSrc = `tile (${item.src})`\n                const sp = spriteAtlas.spriteFrames[imgSrc]\n                // sprite.spriteFrame = spriteFrames.find(v => v.name === imgSrc) || spriteFrames[0]    \n\n                const tileManager = node.addComponent(TileManager)\n                tileManager.init(sp, { i, j })\n                node.setParent(this.node)\n            }\n        }\n    }\n\n    loadRes() {\n        return new Promise<SpriteAtlas>((resolve, reject) => {\n            // resources.loadDir(\"texture/tile/tile\", SpriteFrame, function (err, assets) {\n            //     if (!err) {\n            //         resolve(assets)\n            //         return\n            //     } else {\n            //         console.log(err)\n            //         reject(false)\n            //     }\n            // });\n            resources.load(\"texture/tile/tile\", SpriteAtlas, (err, atlas) => {\n                if (!err) {\n                    resolve(atlas)\n                    return\n                } else {\n                    console.log(err)\n                    reject(false)\n                }\n            });\n        })\n    }\n}"]}