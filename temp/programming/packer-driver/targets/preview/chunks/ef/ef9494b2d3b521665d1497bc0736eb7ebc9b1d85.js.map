{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Scene/UIBattleScene.ts"],"names":["Component","_decorator","Node","ENITIY_TYPE_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","levels","EventMgr","BurstMgr","DoorMgr","IronMgr","WoodenMgr","PlayerMrg","DataManager","FadeMgr","ShakeManager","SoundMgr","SmokeMgr","SpikesMgr","TileMapManager","createNewNode","TILE_WIDTH","TILE_HEIGHT","ccclass","property","UIBattleScene","level","stage","smokeLayer","fadeInit","start","Instance","playMusic","levelIndex","generateStage","initLevel","menu","setSiblingIndex","onLoad","addEventListen","ENUM_NEXTLEVEL","nextLevelMap","ENUM_MOVE_END","checkArrived","ENUM_SHOW_SMOKE","showSmokeHandler","ENUM_RECORD_STEP","saveRecord","ENUM_REVOKE_STEP","revokeRecord","ENUM_RESTART_GAME","onDestry","unEventListen","fader","fadeIn","mask","clearLevelMap","mapInfo","mapColumCount","length","mapRowCount","Promise","all","generateTileMap","generateBurst","generateEnemies","generateSpikes","generateDoor","generateSmokeLayer","generatePlayer","fitPos","fadeOut","removeAllChildren","reset","x","playerX","y","playerY","playerInfo","doorX","doorY","state","doorState","doorInfo","DEATH","emit","direction","smokeItem","smokes","find","smoke","node","setPosition","smokeNode","setParent","smokeMgr","addComponent","init","IDLE","type","SMOKE","push","stageNode","tileMapNode","console","log","position","tileMapManager","playerNode","playerManager","player","ENUM_PLAYER_BORN","enemies","promises","i","enemy","mgr","WOODEN","manager","bursts","burst","burstManager","spikes","spikesManager","doorManager","door","disX","disY","getComponent","stop","item","ATTACK","_type","map","count","records","pop","tartgetX","tartgetY","index","spike"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node, AudioSource } from \"cc\";\nimport { DIRECTION_ENUM, ENITIY_TYPE_ENUM, ENITIY_TYPE_SPIKES_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT } from \"../../Enum\";\nimport levels, { ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport { BurstMgr } from \"../Burst/BurstMgr\";\nimport { DoorMgr } from \"../Door/DoorMgr\";\nimport { IronMgr } from \"../Enemy/Iron/IronMgr\";\nimport { WoodenMgr } from \"../Enemy/Wooden/WoodenMgr\";\nimport { PlayerMrg } from \"../Player/PlayerMgr\";\nimport DataManager, { IRecord } from \"../Runtime/DataManager\";\nimport FadeMgr from \"../Runtime/FadeMgr\";\nimport { ShakeManager } from \"../Runtime/ShakeManager\";\nimport SoundMgr from \"../Runtime/SoundMgr\";\nimport { SmokeMgr } from \"../Smoke/SmokeMgr\";\nimport { SpikesMgr } from \"../Spikes/SpikesMgr\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\n\nconst TILE_WIDTH = 55\nconst TILE_HEIGHT = 55\nconst { ccclass, property } = _decorator;\n@ccclass('UIBattleScene')\nexport class UIBattleScene extends Component {\n    level: ILevel\n    stage: Node\n    smokeLayer: Node\n    fadeInit = false\n    @property(Node)\n    menu: Node = null\n\n    start() {\n        SoundMgr.Instance.playMusic('sound/bg', true)\n        DataManager.Instance.levelIndex = 1\n        this.generateStage()\n        this.initLevel()\n\n        this.menu.setSiblingIndex(10)\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_END, this.checkArrived, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_SHOW_SMOKE, this.showSmokeHandler, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_RECORD_STEP, this.saveRecord, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_REVOKE_STEP, this.revokeRecord, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_RESTART_GAME, this.initLevel, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_END, this.checkArrived)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_SHOW_SMOKE, this.showSmokeHandler)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_RECORD_STEP, this.saveRecord)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_REVOKE_STEP, this.revokeRecord)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_RESTART_GAME, this.initLevel)\n    }\n\n    async initLevel() {\n        if (this.fadeInit) {\n            await FadeMgr.Instance.fader.fadeIn()\n        } else {\n            await FadeMgr.Instance.fader.mask()\n        }\n\n        this.clearLevelMap()\n        this.level = levels[`level${DataManager.Instance.levelIndex}`]\n        if (this.level) {\n            DataManager.Instance.mapInfo = this.level.mapInfo\n            DataManager.Instance.mapColumCount = this.level.mapInfo[0].length //列\n            DataManager.Instance.mapRowCount = this.level.mapInfo.length\n        }\n\n        await Promise.all([\n            this.generateTileMap(),\n            this.generateBurst(),\n            this.generateEnemies(),\n            this.generateSpikes(),\n            this.generateDoor(),\n            this.generateSmokeLayer(),\n            this.generatePlayer(),\n            this.fitPos()\n        ])\n\n        FadeMgr.Instance.fader.fadeOut()\n        this.fadeInit = true\n    }\n\n    nextLevelMap() {\n        DataManager.Instance.levelIndex++\n        this.initLevel()\n    }\n\n    clearLevelMap() {\n        this.stage.removeAllChildren()\n        DataManager.Instance.reset()\n    }\n\n    checkArrived() {\n        const { x: playerX, y: playerY } = DataManager.Instance.playerInfo\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo\n\n        if (playerX === doorX && playerY === doorY &&\n            doorState === ENTITY_STATE_ENUM.DEATH) {\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_NEXTLEVEL)\n        }\n    }\n\n    async showSmokeHandler(x: number, y: number, direction: DIRECTION_ENUM) {\n        const smokeItem = DataManager.Instance.smokes.find(smoke => smoke.state === ENTITY_STATE_ENUM.DEATH)\n        if (smokeItem) {\n            smokeItem.x = x\n            smokeItem.y = y\n            smokeItem.direction = direction\n            smokeItem.node.setPosition(x * TILE_WIDTH - TILE_WIDTH * 1.5, -y * TILE_HEIGHT + TILE_HEIGHT * 1.5)\n        } else {\n            const smokeNode = createNewNode()\n            smokeNode.setParent(this.smokeLayer)\n            const smokeMgr = smokeNode.addComponent(SmokeMgr)\n            await smokeMgr.init({\n                x,\n                y,\n                state: ENTITY_STATE_ENUM.IDLE,\n                type: ENITIY_TYPE_ENUM.SMOKE,\n                direction\n            })\n\n            DataManager.Instance.smokes.push(smokeMgr)\n        }\n    }\n\n    generateStage() {\n        const stageNode = createNewNode()\n        stageNode.setParent(this.node)\n        this.stage = stageNode\n        this.stage.addComponent(ShakeManager)\n    }\n\n    async generateTileMap() {\n        const tileMapNode = createNewNode()\n        tileMapNode.setParent(this.stage)\n        console.log('tileMapNode.position', tileMapNode.position)\n        const tileMapManager = tileMapNode.addComponent(TileMapManager)\n        await tileMapManager.init()\n    }\n\n    async generatePlayer() {\n        const playerNode = createNewNode()\n        playerNode.setParent(this.stage)\n        const playerManager = playerNode.addComponent(PlayerMrg)\n        await playerManager.init(this.level.player)\n        DataManager.Instance.playerInfo = playerManager\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_PLAYER_BORN)\n    }\n\n    async generateEnemies() {\n        DataManager.Instance.enemies = []\n        const promises = []\n        for (let i = 0; i < this.level.enemies.length; i++) {\n            const enemy = this.level.enemies[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const mgr = enemy.type === ENITIY_TYPE_ENUM.WOODEN ? WoodenMgr : IronMgr\n            const manager = node.addComponent(mgr)\n            promises.push(manager.init(enemy))\n            DataManager.Instance.enemies.push(manager)\n        }\n\n        await Promise.all(promises)\n    }\n\n    async generateBurst() {\n        const promises = []\n        for (let i = 0; i < this.level.bursts.length; i++) {\n            const burst = this.level.bursts[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const burstManager = node.addComponent(BurstMgr)\n            promises.push(burstManager.init(burst))\n            DataManager.Instance.bursts.push(burstManager)\n        }\n        await Promise.all(promises)\n    }\n\n    async generateSpikes() {\n        const promises = []\n        for (let i = 0; i < this.level.spikes.length; i++) {\n            const spikes = this.level.spikes[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const spikesManager = node.addComponent(SpikesMgr)\n            promises.push(spikesManager.init(spikes))\n            DataManager.Instance.spikes.push(spikesManager)\n        }\n        await Promise.all(promises)\n    }\n\n    generateSmokeLayer() {\n        const node = createNewNode()\n        this.smokeLayer = node\n        node.setParent(this.stage)\n    }\n\n    async generateDoor() {\n        const node = createNewNode()\n        node.setParent(this.stage)\n        const doorManager = node.addComponent(DoorMgr)\n        await doorManager.init(this.level.door)\n        DataManager.Instance.doorInfo = doorManager\n    }\n\n    fitPos() {\n        const { mapColumCount, mapRowCount } = DataManager.Instance\n        const disX = TILE_WIDTH * mapRowCount / 2\n        const disY = TILE_HEIGHT * mapColumCount / 2 + 100\n        this.stage.getComponent(ShakeManager).stop()\n        this.stage.setPosition(-disX, disY)\n    }\n\n    saveRecord() {\n        const item: IRecord = {\n            player: {\n                x: DataManager.Instance.playerInfo.x,\n                y: DataManager.Instance.playerInfo.y,\n                direction: DataManager.Instance.playerInfo.direction,\n                state: DataManager.Instance.playerInfo.state === ENTITY_STATE_ENUM.IDLE ||\n                    DataManager.Instance.playerInfo.state === ENTITY_STATE_ENUM.ATTACK ||\n                    DataManager.Instance.playerInfo.state === ENTITY_STATE_ENUM.DEATH\n                    ? DataManager.Instance.playerInfo.state : ENTITY_STATE_ENUM.IDLE\n                ,\n                type: DataManager.Instance.playerInfo._type,\n            },\n            door: {\n                x: DataManager.Instance.doorInfo.x,\n                y: DataManager.Instance.doorInfo.y,\n                direction: DataManager.Instance.doorInfo.direction,\n                state: DataManager.Instance.doorInfo.state,\n                type: DataManager.Instance.doorInfo._type,\n            },\n            enemies: DataManager.Instance.enemies.map(({ x, y, type, state, direction }) => ({\n                x, y, type, state, direction\n            })),\n            bursts: DataManager.Instance.bursts.map(({ x, y, type, state, direction }) => ({\n                x, y, type, state, direction\n            })),\n            spikes: DataManager.Instance.spikes.map(({ x, y, count, type }) => ({\n                x, y, count, type\n            })),\n        }\n\n        DataManager.Instance.records.push(item)\n    }\n\n    revokeRecord() {\n        const item = DataManager.Instance.records.pop()\n        if (item) {\n            DataManager.Instance.playerInfo.x = DataManager.Instance.playerInfo.tartgetX = item.player.x\n            DataManager.Instance.playerInfo.y = DataManager.Instance.playerInfo.tartgetY = item.player.y\n            DataManager.Instance.playerInfo.direction = item.player.direction\n            DataManager.Instance.playerInfo.state = item.player.state\n            DataManager.Instance.playerInfo.type = item.player.type\n\n            DataManager.Instance.doorInfo.x = item.door.x\n            DataManager.Instance.doorInfo.y = item.door.y\n            DataManager.Instance.doorInfo.direction = item.door.direction\n            DataManager.Instance.doorInfo.state = item.door.state\n            DataManager.Instance.doorInfo.type = item.door.type\n\n            for (let index = 0; index < DataManager.Instance.enemies.length; index++) {\n                const enemy = item.enemies[index];\n                DataManager.Instance.enemies[index].x = enemy.x\n                DataManager.Instance.enemies[index].y = enemy.y\n                DataManager.Instance.enemies[index].direction = enemy.direction\n                DataManager.Instance.enemies[index].state = enemy.state\n                DataManager.Instance.enemies[index].type = enemy.type\n            }\n\n            for (let index = 0; index < DataManager.Instance.bursts.length; index++) {\n                const burst = item.enemies[index];\n                DataManager.Instance.bursts[index].x = burst.x\n                DataManager.Instance.bursts[index].y = burst.y\n                DataManager.Instance.bursts[index].direction = burst.direction\n                DataManager.Instance.bursts[index].state = burst.state\n                DataManager.Instance.bursts[index].type = burst.type\n            }\n\n            for (let index = 0; index < DataManager.Instance.spikes.length; index++) {\n                const spike = item.spikes[index];\n                DataManager.Instance.spikes[index].x = spike.x\n                DataManager.Instance.spikes[index].y = spike.y\n                DataManager.Instance.spikes[index].count = spike.count\n                DataManager.Instance.spikes[index].type = spike.type\n            }\n        }\n    }\n}"]}