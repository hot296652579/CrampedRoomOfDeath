{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Runtime/ShakeManager.ts"],"names":["Component","game","_decorator","ENUM_EVENT","SHAKE_TYPE_ENUM","EventMgr","ccclass","ShakeManager","isShaking","shakeType","oldTime","oldPos","x","y","onLoad","Instance","addEventListen","ENUM_SHAKE_SCREEN","onShake","onDestroy","unEventListen","stop","type","totalTime","node","position","update","onShakeUpdate","shakeAmount","duration","frequency","curSecond","totalSecond","offset","Math","sin","PI","TOP","setPosition","BOTTOM","LEFT","RIGHT"],"mappings":"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","sourcesContent":["import { Component, game, _decorator } from 'cc'\nimport { ENUM_EVENT, SHAKE_TYPE_ENUM } from '../../Enum'\nimport EventMgr from '../Base/EventMgr'\nconst { ccclass } = _decorator\n\n@ccclass('ShakeManager')\nexport class ShakeManager extends Component {\n    private isShaking: boolean\n    private shakeType: SHAKE_TYPE_ENUM\n    private oldTime: number\n    private oldPos: { x: number; y: number } = { x: 0, y: 0 }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_SHAKE_SCREEN, this.onShake, this)\n    }\n\n    onDestroy() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_SHAKE_SCREEN, this.onShake)\n    }\n\n    stop() {\n        this.isShaking = false\n    }\n\n    onShake(type: SHAKE_TYPE_ENUM) {\n        if (this.isShaking) {\n            return\n        }\n        this.isShaking = true\n        this.shakeType = type\n        this.oldTime = game.totalTime\n        this.oldPos.x = this.node.position.x\n        this.oldPos.y = this.node.position.y\n    }\n\n    update() {\n        this.onShakeUpdate()\n    }\n\n    /***\n     * 正弦震动\n     * y= A * sin *(wx + f)\n     */\n    onShakeUpdate() {\n        if (this.isShaking) {\n            //振幅\n            const shakeAmount = 1.6\n            //持续时间\n            const duration = 200\n            //频率\n            const frequency = 12\n            //当前时间\n            const curSecond = (game.totalTime - this.oldTime) / 1000\n            //总时间\n            const totalSecond = duration / 1000\n            const offset = shakeAmount * Math.sin(frequency * Math.PI * curSecond)\n            if (this.shakeType === SHAKE_TYPE_ENUM.TOP) {\n                this.node.setPosition(this.oldPos.x, this.oldPos.y - offset)\n            } else if (this.shakeType === SHAKE_TYPE_ENUM.BOTTOM) {\n                this.node.setPosition(this.oldPos.x, this.oldPos.y + offset)\n            } else if (this.shakeType === SHAKE_TYPE_ENUM.LEFT) {\n                this.node.setPosition(this.oldPos.x - offset, this.oldPos.y)\n            } else if (this.shakeType === SHAKE_TYPE_ENUM.RIGHT) {\n                this.node.setPosition(this.oldPos.x + offset, this.oldPos.y)\n            }\n            if (curSecond > totalSecond) {\n                this.isShaking = false\n                this.node.setPosition(this.oldPos.x, this.oldPos.y)\n            }\n        }\n    }\n}"]}