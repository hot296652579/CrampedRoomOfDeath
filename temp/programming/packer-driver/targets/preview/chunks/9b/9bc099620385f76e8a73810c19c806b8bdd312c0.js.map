{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Scene/UIBattleScene.ts"],"names":["Component","_decorator","ENITIY_TYPE_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","levels","EventMgr","BurstMgr","DoorMgr","IronMgr","WoodenMgr","PlayerMrg","DataManager","FadeMgr","ShakeManager","SmokeMgr","SpikesMgr","TileMapManager","createNewNode","TILE_WIDTH","TILE_HEIGHT","ccclass","property","UIBattleScene","level","stage","smokeLayer","start","Instance","levelIndex","generateStage","initLevel","onLoad","addEventListen","ENUM_NEXTLEVEL","nextLevelMap","ENUM_MOVE_END","checkArrived","ENUM_SHOW_SMOKE","showSmokeHandler","onDestry","unEventListen","fader","fadeIn","clearLevelMap","mapInfo","mapColumCount","length","mapRowCount","Promise","all","generateTileMap","generateBurst","generateEnemies","generateSpikes","generateDoor","generateSmokeLayer","generatePlayer","fitPos","fadeOut","removeAllChildren","reset","x","playerX","y","playerY","playerInfo","doorX","doorY","state","doorState","doorInfo","DEATH","emit","direction","smokeItem","smokes","find","smoke","node","setPosition","smokeNode","setParent","smokeMgr","addComponent","init","IDLE","type","SMOKE","push","stageNode","tileMapNode","tileMapManager","playerNode","playerManager","player","ENUM_PLAYER_BORN","enemies","promises","i","enemy","Manager","WOODEN","manager","bursts","burst","burstManager","spikes","spikesManager","doorManager","door","disX","disY","getComponent","stop"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node } from \"cc\";\nimport { DIRECTION_ENUM, ENITIY_TYPE_ENUM, ENITIY_TYPE_SPIKES_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT } from \"../../Enum\";\nimport levels, { ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport { BurstMgr } from \"../Burst/BurstMgr\";\nimport { DoorMgr } from \"../Door/DoorMgr\";\nimport { IronMgr } from \"../Enemy/Iron/IronMgr\";\nimport { WoodenMgr } from \"../Enemy/Wooden/WoodenMgr\";\nimport { PlayerMrg } from \"../Player/PlayerMgr\";\nimport DataManager from \"../Runtime/DataManager\";\nimport FadeMgr from \"../Runtime/FadeMgr\";\nimport { ShakeManager } from \"../Runtime/ShakeManager\";\nimport { SmokeMgr } from \"../Smoke/SmokeMgr\";\nimport { SpikesMgr } from \"../Spikes/SpikesMgr\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\n\nconst TILE_WIDTH = 55\nconst TILE_HEIGHT = 55\nconst { ccclass, property } = _decorator;\n@ccclass('UIBattleScene')\nexport class UIBattleScene extends Component {\n    level: ILevel\n    stage: Node\n    smokeLayer: Node\n\n    start() {\n        DataManager.Instance.levelIndex = 1\n        this.generateStage()\n        this.initLevel()\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_END, this.checkArrived, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_SHOW_SMOKE, this.showSmokeHandler, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_END, this.checkArrived)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_SHOW_SMOKE, this.showSmokeHandler)\n    }\n\n    async initLevel() {\n        FadeMgr.Instance.fader.fadeIn()\n        this.clearLevelMap()\n        this.level = levels[`level${DataManager.Instance.levelIndex}`]\n        if (this.level) {\n            DataManager.Instance.mapInfo = this.level.mapInfo\n            DataManager.Instance.mapColumCount = this.level.mapInfo[0].length //列\n            DataManager.Instance.mapRowCount = this.level.mapInfo.length\n        }\n\n        await Promise.all([\n            this.generateTileMap(),\n            this.generateBurst(),\n            this.generateEnemies(),\n            this.generateSpikes(),\n            this.generateDoor(),\n            this.generateSmokeLayer(),\n            this.generatePlayer(),\n            this.fitPos()\n        ])\n\n        FadeMgr.Instance.fader.fadeOut()\n    }\n\n    nextLevelMap() {\n        DataManager.Instance.levelIndex++\n        this.initLevel()\n    }\n\n    clearLevelMap() {\n        this.stage.removeAllChildren()\n        DataManager.Instance.reset()\n    }\n\n    checkArrived() {\n        const { x: playerX, y: playerY } = DataManager.Instance.playerInfo\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo\n\n        if (playerX === doorX && playerY === doorY &&\n            doorState === ENTITY_STATE_ENUM.DEATH) {\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_NEXTLEVEL)\n        }\n    }\n\n    async showSmokeHandler(x: number, y: number, direction: DIRECTION_ENUM) {\n        const smokeItem = DataManager.Instance.smokes.find(smoke => smoke.state === ENTITY_STATE_ENUM.DEATH)\n        if (smokeItem) {\n            smokeItem.x = x\n            smokeItem.y = y\n            smokeItem.direction = direction\n            smokeItem.node.setPosition(x * TILE_WIDTH - TILE_WIDTH * 1.5, -y * TILE_HEIGHT + TILE_HEIGHT * 1.5)\n        } else {\n            const smokeNode = createNewNode()\n            smokeNode.setParent(this.smokeLayer)\n            const smokeMgr = smokeNode.addComponent(SmokeMgr)\n            await smokeMgr.init({\n                x,\n                y,\n                state: ENTITY_STATE_ENUM.IDLE,\n                type: ENITIY_TYPE_ENUM.SMOKE,\n                direction\n            })\n\n            DataManager.Instance.smokes.push(smokeMgr)\n        }\n    }\n\n    generateStage() {\n        const stageNode = createNewNode()\n        stageNode.setParent(this.node)\n        this.stage = stageNode\n        this.stage.addComponent(ShakeManager)\n    }\n\n    async generateTileMap() {\n        const tileMapNode = createNewNode()\n        tileMapNode.setParent(this.stage)\n        const tileMapManager = tileMapNode.addComponent(TileMapManager)\n        await tileMapManager.init()\n    }\n\n    async generatePlayer() {\n        const playerNode = createNewNode()\n        playerNode.setParent(this.stage)\n        const playerManager = playerNode.addComponent(PlayerMrg)\n        await playerManager.init(this.level.player)\n        DataManager.Instance.playerInfo = playerManager\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_PLAYER_BORN)\n    }\n\n    async generateEnemies() {\n        DataManager.Instance.enemies = []\n        const promises = []\n        for (let i = 0; i < this.level.enemies.length; i++) {\n            const enemy = this.level.enemies[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const Manager = enemy.type === ENITIY_TYPE_ENUM.WOODEN ? WoodenMgr : IronMgr\n            const manager = node.addComponent(Manager)\n            promises.push(manager.init(enemy))\n            DataManager.Instance.enemies.push(manager)\n        }\n\n        await Promise.all(promises)\n    }\n\n    async generateBurst() {\n        const promises = []\n        for (let i = 0; i < this.level.bursts.length; i++) {\n            const burst = this.level.bursts[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const burstManager = node.addComponent(BurstMgr)\n            promises.push(burstManager.init(burst))\n            DataManager.Instance.bursts.push(burstManager)\n        }\n        await Promise.all(promises)\n    }\n\n    async generateSpikes() {\n        const promises = []\n        for (let i = 0; i < this.level.spikes.length; i++) {\n            const spikes = this.level.spikes[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const spikesManager = node.addComponent(SpikesMgr)\n            promises.push(spikesManager.init(spikes))\n            DataManager.Instance.spikes.push(spikesManager)\n        }\n        await Promise.all(promises)\n    }\n\n    generateSmokeLayer() {\n        const node = createNewNode()\n        this.smokeLayer = node\n        node.setParent(this.stage)\n    }\n\n    async generateDoor() {\n        const node = createNewNode()\n        node.setParent(this.stage)\n        const doorManager = node.addComponent(DoorMgr)\n        await doorManager.init(this.level.door)\n        DataManager.Instance.doorInfo = doorManager\n    }\n\n    fitPos() {\n        const { mapColumCount, mapRowCount } = DataManager.Instance\n        const disX = TILE_WIDTH * mapRowCount / 2\n        const disY = TILE_HEIGHT * mapColumCount / 2 + 100\n        this.stage.getComponent(ShakeManager).stop()\n        this.stage.setPosition(-disX, disY)\n    }\n}"]}