{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Base/EnitiyMgr.ts"],"names":["Component","_decorator","Sprite","UITransform","DIRECTION_ENUM","DIRECTION_ORDER_ENUM","ENUM_EVENT","PARAMS_NAME_TYPE","EventMgr","DataManager","TILE_HEIGHT","TILE_WIDTH","MOVE_SPEED","ccclass","property","EnitiyMgr","x","y","fsm","_direction","_state","_type","direction","newDirection","setParams","DIRECTION","state","newState","init","params","sprite","addComponent","sizeMode","SizeMode","CUSTOM","transform","node","getComponent","setContentSize","type","onLoad","Instance","addEventListen","ENUM_MOVE_END","handlerPlayerMoveEnd","playerX","playerY","playerInfo","disX","Math","abs","disY","TOP","RIGHT","LEFT","BOTTOM","onDestry","unEventListen","update","setPosition"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node, Sprite, UITransform, Animation, SpriteAtlas, AnimationClip, animation, SpriteFrame, Texture2D, math } from \"cc\";\nimport { DIRECTION_ENUM, DIRECTION_ORDER_ENUM, ENITIY_TYPE_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT, ENUM_BOTTOM_CONTROLLER, PARAMS_NAME_TYPE } from \"../../Enum\";\nimport levels, { IEnitiy, ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport ResourceLoadMgr from \"../Base/ResourceLoadMgr\";\nimport DataManager from \"../Runtime/DataManager\";\nimport { TILE_HEIGHT, TILE_WIDTH } from \"../TileMap/TileManager\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\nimport { PlayerStateMachine } from \"../Base/PlayerStateMachine\";\n\nexport const MOVE_SPEED = 1 / 10\n\nconst { ccclass, property } = _decorator;\n@ccclass('EnitiyMgr')\nexport class EnitiyMgr extends Component {\n    x: number = 0\n    y: number = 0\n\n    fsm: PlayerStateMachine = null\n\n    private _direction: DIRECTION_ENUM\n    private _state: ENTITY_STATE_ENUM\n    private _type: ENITIY_TYPE_ENUM\n\n    get direction() {\n        return this._direction\n    }\n    set direction(newDirection) {\n        this._direction = newDirection\n        this.fsm.setParams(PARAMS_NAME_TYPE.DIRECTION, DIRECTION_ORDER_ENUM[this._direction])\n    }\n\n    get state() {\n        return this._state\n    }\n    set state(newState) {\n        this._state = newState\n        this.fsm.setParams(this.state, true)\n    }\n\n    async init(params: IEnitiy) {\n        const sprite = this.addComponent(Sprite)\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM\n        const transform = this.node.getComponent(UITransform)\n        transform.setContentSize(TILE_WIDTH * 4, TILE_HEIGHT * 4)\n\n        this.x = params.x\n        this.y = params.y\n        this.direction = params.direction\n        this.state = params.state\n        this._type = params.type\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_END, this.handlerPlayerMoveEnd, this)\n    }\n\n    handlerPlayerMoveEnd() {\n        const { x: playerX, y: playerY } = DataManager.Instance.playerInfo\n        const disX = Math.abs(this.x - playerX)\n        const disY = Math.abs(this.y - playerY)\n\n        if (playerX >= this.x && playerY <= this.y) {\n            disY > disX ? this.direction = DIRECTION_ENUM.TOP : this.direction = DIRECTION_ENUM.RIGHT\n        } else if (playerX <= this.x && playerY <= this.y) {\n            disY > disX ? this.direction = DIRECTION_ENUM.TOP : this.direction = DIRECTION_ENUM.LEFT\n        } else if (playerX <= this.x && this.y >= playerY) {\n            disY > disX ? this.direction = DIRECTION_ENUM.BOTTOM : this.direction = DIRECTION_ENUM.LEFT\n        } else if (playerX >= this.x && this.y >= playerY) {\n            disY > disX ? this.direction = DIRECTION_ENUM.BOTTOM : this.direction = DIRECTION_ENUM.RIGHT\n        }\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_END, this.handlerPlayerMoveEnd)\n    }\n\n    update() {\n        this.node.setPosition(this.x * TILE_WIDTH - TILE_WIDTH * 1.5, -this.y * TILE_HEIGHT + TILE_HEIGHT * 1.5)\n    }\n}"]}