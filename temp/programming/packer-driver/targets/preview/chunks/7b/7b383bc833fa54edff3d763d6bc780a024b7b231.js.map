{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Player/PlayerMgr.ts"],"names":["_decorator","DIRECTION_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","ENUM_BOTTOM_CONTROLLER","EventMgr","DataManager","PlayerStateMachine","EnitiyMgr","MOVE_SPEED","ccclass","property","PlayerMrg","tartgetX","tartgetY","isMoving","init","params","fsm","addComponent","x","y","onLoad","Instance","addEventListen","ENUM_MOVE_PLAYER","inputHanlder","ENUM_PLAYER_DEATH","onDeathHanlder","onDestry","unEventListen","update","updateXY","Math","abs","emit","ENUM_MOVE_END","inputDirection","state","DEATH","AIRDEATH","ATTACK","willBlock","handlerMove","type","direction","tileMgrInfo","mapColumCount","mapRowCount","doorX","doorY","doorState","doorInfo","enemies","filter","enemy","console","log","TOP","playerNextY","playerNextX","BLOCKFRONT","weaponNextY","nextPlayerTile","nextWeaponTile","canMove","canTurn","checkDoor","checkCollisionDoor","checkEnemy","checkCollisionEnenies","BOTTOM","BLOCKBACK","LEFT","BLOCKRIGHT","weaponNextX","RIGHT","BLOCKLEFT","TURNLEFT","nextY","nextX","BLOCKTURNLEFT","i","length","enemyX","enemyY","TURNRIGHT","BLOCKTURNRIGHT","playerNext","weaponNext","willAttack","index","id"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node, Sprite, UITransform, Animation, SpriteAtlas, AnimationClip, animation, SpriteFrame, Texture2D, math } from \"cc\";\nimport { DIRECTION_ENUM, DIRECTION_ORDER_ENUM, ENITIY_TYPE_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT, ENUM_BOTTOM_CONTROLLER, PARAMS_NAME_TYPE } from \"../../Enum\";\nimport levels, { IEnitiy, ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport ResourceLoadMgr from \"../Base/ResourceLoadMgr\";\nimport DataManager from \"../Runtime/DataManager\";\nimport { TILE_HEIGHT, TILE_WIDTH } from \"../TileMap/TileManager\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\nimport { PlayerStateMachine } from \"./PlayerStateMachine\";\nimport { EnitiyMgr } from \"../Base/EnitiyMgr\";\nimport { EnemyMgr } from \"../Base/EnemyMgr\";\n\nexport const MOVE_SPEED = 1 / 10\n\nconst { ccclass, property } = _decorator;\n@ccclass('PlayerMrg')\nexport class PlayerMrg extends EnitiyMgr {\n\n    tartgetX: number = 0\n    tartgetY: number = 0\n    isMoving: boolean = false\n\n    async init(params: IEnitiy) {\n        this.fsm = this.addComponent(PlayerStateMachine)\n        await this.fsm.init()\n\n        super.init(params)\n\n        this.tartgetX = this.x\n        this.tartgetY = this.y\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_PLAYER, this.inputHanlder, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_PLAYER_DEATH, this.onDeathHanlder, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_PLAYER, this.inputHanlder)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_PLAYER_DEATH, this.onDeathHanlder)\n    }\n\n    update() {\n        this.updateXY()\n        super.update()\n    }\n\n    updateXY() {\n        if (this.tartgetX < this.x) {\n            this.x -= MOVE_SPEED\n        } else if (this.tartgetX > this.x) {\n            this.x += MOVE_SPEED\n        } else if (this.tartgetY < this.y) {\n            this.y -= MOVE_SPEED\n        } else if (this.tartgetY > this.y) {\n            this.y += MOVE_SPEED\n        }\n\n        if (Math.abs(this.tartgetX - this.x) <= 0.1 && Math.abs(this.tartgetY - this.y) <= 0.1 && this.isMoving) {\n            this.isMoving = false\n            this.x = this.tartgetX\n            this.y = this.tartgetY\n\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n        }\n    }\n\n    inputHanlder(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        if (this.state === ENTITY_STATE_ENUM.DEATH || this.state === ENTITY_STATE_ENUM.AIRDEATH || this.state === ENTITY_STATE_ENUM.ATTACK)\n            return\n\n        if (this.isMoving)\n            return\n\n        if (this.willBlock(inputDirection)) {\n            return\n        }\n\n        // const enemyId = this.willAttack(inputDirection)\n        // if (enemyId) {\n        //     EventMgr.Instance.emit(ENUM_EVENT.ENUM_ENEMY_DEATH, enemyId)\n        //     EventMgr.Instance.emit(ENUM_EVENT.ENUM_OPEN_DOOR)\n        //     return\n        // }\n\n        this.handlerMove(inputDirection)\n    }\n\n    onDeathHanlder(type: ENTITY_STATE_ENUM) {\n        this.state = type\n    }\n\n    willBlock(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const { tileMgrInfo, mapColumCount, mapRowCount } = DataManager.Instance\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo\n        const enemies: EnemyMgr[] = DataManager.Instance.enemies.filter(enemy => enemy.state != ENTITY_STATE_ENUM.DEATH)\n\n        console.log('y', y)\n\n        //先判断输入上时候\n        if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP) {\n            const playerNextY = y - 1\n            const playerNextX = x - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextY <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const weaponNextY = y - 2\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextY <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextY <= 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKRIGHT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKRIGHT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextY <= 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.LEFT) {\n            const playerNextY = y - 1\n            const playerNextX = x - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextX <= 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextX <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextX <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x - 2\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextX <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n            }\n\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.RIGHT) {\n            const playerNextX = x + 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x + 2\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n            const playerNextY = y + 1\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextY = y + 2\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n            }\n\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT) {\n            let nextY, nextX\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上左转的话，左上角三个tile都必须turnable为true，并且没有敌人\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y - 1\n                nextX = x + 1\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileMgrInfo[x]?.[nextY] || tileMgrInfo[x]?.[nextY].canTurn) &&\n                (!tileMgrInfo[nextX]?.[y] || tileMgrInfo[nextX]?.[y].canTurn) &&\n                (!tileMgrInfo[nextX]?.[nextY] || tileMgrInfo[nextX]?.[nextY].canTurn)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n                return true\n            }\n\n            //判断门\n            if (\n                ((doorX === x && doorY === nextY) ||\n                    (doorX === nextX && doorY === y) ||\n                    (doorX === nextX && doorY === nextY)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n                return true\n            }\n\n            //判断敌人\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if (enemyX === nextX && enemyY === y) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                } else if (enemyX === nextX && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                } else if (enemyX === x && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                }\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT) {\n            let nextX, nextY\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上右转的话，右上角三个tile都必须turnable为true\n                nextY = y - 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y + 1\n                nextX = x + 1\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileMgrInfo[x]?.[nextY] || tileMgrInfo[x]?.[nextY].canTurn) &&\n                (!tileMgrInfo[nextX]?.[y] || tileMgrInfo[nextX]?.[y].canTurn) &&\n                (!tileMgrInfo[nextX]?.[nextY] || tileMgrInfo[nextX]?.[nextY].canTurn)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n                return true\n            }\n\n            //判断门\n            if (\n                ((doorX === x && doorY === nextY) ||\n                    (doorX === nextX && doorY === y) ||\n                    (doorX === nextX && doorY === nextY)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n                return true\n            }\n\n            //判断敌人\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if (enemyX === nextX && enemyY === y) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                } else if (enemyX === nextX && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                } else if (enemyX === x && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                }\n            }\n        }\n\n        return false\n    }\n\n    checkCollisionDoor(playerNext, weaponNext, state: ENTITY_STATE_ENUM, inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo\n\n        if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP || inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n            //判断上下门\n            if (\n                ((doorX === x && doorY === playerNext) || (doorX === x && doorY === weaponNext)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = state\n                console.log('撞到了门')\n                return true\n            }\n        } else {\n            if (\n                ((doorX === playerNext && doorY === y) || (doorX === weaponNext && doorY === weaponNext)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = state\n                console.log('撞到了门')\n                return true\n            }\n        }\n\n        //判断左右门\n\n        return false\n    }\n\n    checkCollisionEnenies(playerNext, weaponNext, state: ENTITY_STATE_ENUM, inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const enemies: EnemyMgr[] = DataManager.Instance.enemies.filter(enemy => enemy.state != ENTITY_STATE_ENUM.DEATH)\n\n        if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP || inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if ((enemyX === x && enemyY === weaponNext) || (enemyX === x && enemyY === playerNext)) {\n                    this.state = state\n                    console.log('撞到了敌人')\n                    return true\n                }\n            }\n        }\n\n        return false\n    }\n\n    willAttack(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        // let enemies = DataManager.Instance.enemies.filter(enemy => enemy.state != ENTITY_STATE_ENUM.DEATH)\n        let enemies = DataManager.Instance.enemies.filter((enemy) => { return enemy.state != ENTITY_STATE_ENUM.DEATH })\n\n        for (let index = 0; index < enemies.length; index++) {\n            const { x: enemyX, y: enemyY, id } = enemies[index];\n            if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP && this.direction === DIRECTION_ENUM.TOP && enemyX == this.x && enemyY == this.y - 2) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM && this.direction === DIRECTION_ENUM.BOTTOM && enemyX == this.x && enemyY == this.y + 2) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.LEFT && this.direction === DIRECTION_ENUM.LEFT && enemyX == this.x - 2 && enemyY == this.y) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.RIGHT && this.direction === DIRECTION_ENUM.RIGHT && enemyX == this.x + 2 && enemyY == this.y) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            }\n        }\n\n        return ''\n    }\n\n    handlerMove(direction: ENUM_BOTTOM_CONTROLLER) {\n        console.log(DataManager.Instance.tileMgrInfo)\n        switch (direction) {\n            case ENUM_BOTTOM_CONTROLLER.TOP:\n                this.isMoving = true\n                this.tartgetY -= 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.BOTTOM:\n                this.isMoving = true\n                this.tartgetY += 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.LEFT:\n                this.isMoving = true\n                this.tartgetX -= 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.RIGHT:\n                this.isMoving = true\n                this.tartgetX += 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.TURNLEFT:\n                // this.fsm.setParams(PARAMS_NAME_TYPE.TURNLEFT, true)\n\n                if (this.direction === DIRECTION_ENUM.TOP) {\n                    this.direction = DIRECTION_ENUM.LEFT\n                } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n                    this.direction = DIRECTION_ENUM.RIGHT\n                } else if (this.direction === DIRECTION_ENUM.LEFT) {\n                    this.direction = DIRECTION_ENUM.BOTTOM\n                } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n                    this.direction = DIRECTION_ENUM.TOP\n                }\n                this.state = ENTITY_STATE_ENUM.TURNLEFT\n                break;\n            case ENUM_BOTTOM_CONTROLLER.TURNRIGHT:\n                if (this.direction === DIRECTION_ENUM.TOP) {\n                    this.direction = DIRECTION_ENUM.RIGHT\n                } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n                    this.direction = DIRECTION_ENUM.LEFT\n                } else if (this.direction === DIRECTION_ENUM.LEFT) {\n                    this.direction = DIRECTION_ENUM.TOP\n                } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n                    this.direction = DIRECTION_ENUM.BOTTOM\n                }\n                this.state = ENTITY_STATE_ENUM.TURNRIGHT\n                break;\n\n            default:\n                break;\n        }\n    }\n}"]}