{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Scene/UIBattleScene.ts"],"names":["Component","_decorator","ENITIY_TYPE_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","levels","EventMgr","BurstMgr","DoorMgr","IronMgr","WoodenMgr","PlayerMrg","DataManager","SpikesMgr","TileMapManager","createNewNode","TILE_WIDTH","TILE_HEIGHT","ccclass","property","UIBattleScene","level","stage","start","Instance","levelIndex","generateStage","initLevel","onLoad","addEventListen","ENUM_NEXTLEVEL","nextLevelMap","ENUM_MOVE_END","checkArrived","onDestry","unEventListen","clearLevelMap","mapInfo","mapColumCount","length","mapRowCount","generateTileMap","generateBurst","generateEnemies","generateSpikes","generateDoor","generatePlayer","fitPos","removeAllChildren","reset","x","playerX","y","playerY","playerInfo","doorX","doorY","state","doorState","doorInfo","DEATH","emit","stageNode","setParent","node","tileMapNode","tileMapManager","addComponent","init","playerNode","playerManager","player","ENUM_PLAYER_BORN","enemies","promises","i","enemy","Manager","type","WOODEN","manager","push","Promise","all","bursts","burst","burstManager","spikes","spikesManager","doorManager","door","disX","disY","setPosition"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node } from \"cc\";\nimport { DIRECTION_ENUM, ENITIY_TYPE_ENUM, ENITIY_TYPE_SPIKES_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT } from \"../../Enum\";\nimport levels, { ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport { BurstMgr } from \"../Burst/BurstMgr\";\nimport { DoorMgr } from \"../Door/DoorMgr\";\nimport { IronMgr } from \"../Enemy/Iron/IronMgr\";\nimport { WoodenMgr } from \"../Enemy/Wooden/WoodenMgr\";\nimport { PlayerMrg } from \"../Player/PlayerMgr\";\nimport DataManager from \"../Runtime/DataManager\";\nimport { SpikesMgr } from \"../Spikes/SpikesMgr\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\n\nconst TILE_WIDTH = 55\nconst TILE_HEIGHT = 55\nconst { ccclass, property } = _decorator;\n@ccclass('UIBattleScene')\nexport class UIBattleScene extends Component {\n    level: ILevel\n    stage: Node\n    start() {\n        DataManager.Instance.levelIndex = 2\n        this.generateStage()\n        this.initLevel()\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_END, this.checkArrived, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_END, this.checkArrived)\n    }\n\n    initLevel() {\n        this.clearLevelMap()\n        this.level = levels[`level${DataManager.Instance.levelIndex}`]\n        if (this.level) {\n            DataManager.Instance.mapInfo = this.level.mapInfo\n            DataManager.Instance.mapColumCount = this.level.mapInfo[0].length //åˆ—\n            DataManager.Instance.mapRowCount = this.level.mapInfo.length\n        }\n\n        this.generateTileMap()\n        this.generateBurst()\n        this.generateEnemies()\n        this.generateSpikes()\n        this.generateDoor()\n        this.generatePlayer()\n        this.fitPos()\n    }\n\n    nextLevelMap() {\n        DataManager.Instance.levelIndex++\n        this.initLevel()\n    }\n\n    clearLevelMap() {\n        this.stage.removeAllChildren()\n        DataManager.Instance.reset()\n    }\n\n    checkArrived() {\n        const { x: playerX, y: playerY } = DataManager.Instance.playerInfo\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo\n\n        if (playerX === doorX && playerY === doorY &&\n            doorState === ENTITY_STATE_ENUM.DEATH) {\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_NEXTLEVEL)\n        }\n    }\n\n    generateStage() {\n        const stageNode = createNewNode()\n        stageNode.setParent(this.node)\n        this.stage = stageNode\n    }\n\n    async generateTileMap() {\n        const tileMapNode = createNewNode()\n        tileMapNode.setParent(this.stage)\n        const tileMapManager = tileMapNode.addComponent(TileMapManager)\n        await tileMapManager.init()\n    }\n\n    async generatePlayer() {\n        const playerNode = createNewNode()\n        playerNode.setParent(this.stage)\n        const playerManager = playerNode.addComponent(PlayerMrg)\n        await playerManager.init(this.level.player)\n        DataManager.Instance.playerInfo = playerManager\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_PLAYER_BORN)\n    }\n\n    async generateEnemies() {\n        DataManager.Instance.enemies = []\n        const promises = []\n        for (let i = 0; i < this.level.enemies.length; i++) {\n            const enemy = this.level.enemies[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const Manager = enemy.type === ENITIY_TYPE_ENUM.WOODEN ? WoodenMgr : IronMgr\n            const manager = node.addComponent(Manager)\n            promises.push(manager.init(enemy))\n            DataManager.Instance.enemies.push(manager)\n        }\n\n        await Promise.all(promises)\n    }\n\n    async generateBurst() {\n        const promises = []\n        for (let i = 0; i < this.level.bursts.length; i++) {\n            const burst = this.level.bursts[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const burstManager = node.addComponent(BurstMgr)\n            promises.push(burstManager.init(burst))\n            DataManager.Instance.bursts.push(burstManager)\n        }\n        await Promise.all(promises)\n    }\n\n    async generateSpikes() {\n        const promises = []\n        for (let i = 0; i < this.level.spikes.length; i++) {\n            const spikes = this.level.spikes[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const spikesManager = node.addComponent(SpikesMgr)\n            promises.push(spikesManager.init(spikes))\n            DataManager.Instance.spikes.push(spikesManager)\n        }\n        await Promise.all(promises)\n    }\n\n    async generateDoor() {\n        const node = createNewNode()\n        node.setParent(this.stage)\n        const doorManager = node.addComponent(DoorMgr)\n        await doorManager.init(this.level.door)\n        DataManager.Instance.doorInfo = doorManager\n    }\n\n    fitPos() {\n        const { mapColumCount, mapRowCount } = DataManager.Instance\n        const disX = TILE_WIDTH * mapRowCount / 2\n        const disY = TILE_HEIGHT * mapColumCount / 2 + 100\n        this.stage.setPosition(-disX, disY)\n    }\n}"]}