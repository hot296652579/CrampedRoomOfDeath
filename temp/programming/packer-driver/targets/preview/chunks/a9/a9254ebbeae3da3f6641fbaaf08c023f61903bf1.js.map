{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Player/PlayerMgr.ts"],"names":["Component","_decorator","SpriteAtlas","ResourceLoadMgr","ANIMATION_SPEED","ccclass","property","PlayerMrg","init","spriteAtlas","Instance","loadRes"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,U,OAAAA,U;AAAkDC,MAAAA,W,OAAAA,W;;AAI/DC,MAAAA,e;;;;;;;;;AAMDC,MAAAA,e,GAAkB,IAAI,C;OAEtB;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;2BAEjBM,S,WADZF,OAAO,CAAC,WAAD,C,gBAAR,MACaE,SADb,SAC+BP,SAD/B,CACyC;AAC/BQ,QAAAA,IAAI,GAAG;AAAA;AACT;AACA,gBAAMC,WAAW,SAAS;AAAA;AAAA,oDAAgBC,QAAhB,CAAyBC,OAAzB,CAAiC,qBAAjC,EAAwDT,WAAxD,CAA1B,CAFS,CAGT;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAnCS;AAoCZ;;AArCoC,O","sourcesContent":["import { Component, _decorator, Node, Sprite, UITransform, Animation, SpriteAtlas, AnimationClip, animation, SpriteFrame, Texture2D } from \"cc\";\nimport { ENUM_EVENT } from \"../../Enum\";\nimport levels, { ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport ResourceLoadMgr from \"../Base/ResourceLoadMgr\";\nimport DataManager from \"../Runtime/DataManager\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\n\nconst ANIMATION_SPEED = 1 / 8\n\nconst { ccclass, property } = _decorator;\n@ccclass('PlayerMrg')\nexport class PlayerMrg extends Component {\n    async init() {\n        //\n        const spriteAtlas = await ResourceLoadMgr.Instance.loadRes('texture/burst/death', SpriteAtlas)\n        // const sprite = this.addComponent(Sprite)\n        // const transform = this.node.getComponent(UITransform)\n\n        // const animationClip = new AnimationClip();\n        // animationClip.duration = 1.0; // 整个动画剪辑的周期\n\n        // const animationCom = this.addComponent(Animation)\n\n        // const track = new animation.ObjectTrack(); // 创建一个对象轨道\n        // track.path = new animation.TrackPath().toComponent(Sprite).toProperty('spriteFrame'); // 找子节点组件 以及属性\n        // track.channel.curve.assignSorted([ // 为 x 通道的曲线添加关键帧 @params 时间和值\n        //     [0.4, ({ value: spriteAtlas[0] })],\n        //     [0.6, ({ value: 0.6 })],\n        //     [0.8, ({ value: 0.8 })],\n        // ])\n\n        // const spFrames = spriteAtlas[0].spriteFrames\n        // const frams: Array<[number, SpriteFrame]> = []\n        // for (const key in spFrames) {\n        //     if (Object.prototype.hasOwnProperty.call(spFrames, key)) {\n        //         const element = spFrames[key];\n        //         frams.push([Number(key), element])\n        //     }\n        // }\n\n        // console.log(frams)\n\n        // const frames: Array<[number, SpriteFrame]> = spFrames.map((item: SpriteFrame, index: number) => [ANIMATION_SPEED * index, item])\n        // const frames: Array<[number, SpriteFrame]> = spriteAtlas.map((item: SpriteFrame, index: number) => [ANIMATION_SPEED * index, item])\n        // track.channel.curve.assignSorted(frames);\n\n        // // 最后将轨道添加到动画剪辑以应用\n        // animationClip.addTrack(track);\n    }\n}"]}