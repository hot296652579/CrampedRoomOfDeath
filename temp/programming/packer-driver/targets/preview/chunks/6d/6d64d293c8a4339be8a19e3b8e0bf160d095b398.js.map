{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Base/SubStateMachine.ts"],"names":["Component","_decorator","FSM_PARAMS_TYPE_ENUM","ccclass","property","SubStateMachine","constructor","fsm","_currentSate","stateMachine","Map","animationCom","waitList","currentSate","newSate","run","resetTrigger","_","data","params","type","TRIGGER","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,U,OAAAA,U;;AACYC,MAAAA,oB,iBAAAA,oB;;;;;;;;;OAQ1B;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;iCAERI,e,WADrBF,OAAO,CAAC,iBAAD,C,gBAAR,MACsBE,eADtB,SAC8CL,SAD9C,CACwD;AACpDM,QAAAA,WAAW,CAACC,GAAD,EAAoB;AAC3B;AAD2B,eAGvBC,YAHuB,GAGD,IAHC;AAAA,eAI/BC,YAJ+B,GAII,IAAIC,GAAJ,EAJJ;AAAA,eAM/BC,YAN+B,GAML,IANK;AAAA,eAQ/BC,QAR+B,GAQS,EART;AAE9B;;AAQc,YAAXC,WAAW,GAAG;AACd,iBAAO,KAAKL,YAAZ;AACH;;AAEc,YAAXK,WAAW,CAACC,OAAD,EAAU;AACrB,eAAKN,YAAL,GAAoBM,OAApB;;AACA,eAAKN,YAAL,CAAkBO,GAAlB;AACH;;AAEDC,QAAAA,YAAY,GAAG;AACX,eAAK,IAAM,CAACC,CAAD,EAAIC,IAAJ,CAAX,IAAwB,KAAKC,MAA7B,EAAqC;AACjC,gBAAID,IAAI,CAACE,IAAL,IAAa;AAAA;AAAA,8DAAqBC,OAAtC,EAA+C;AAC3CH,cAAAA,IAAI,CAACI,KAAL,GAAa,KAAb;AACH;AACJ;AACJ;;AA1BmD,O","sourcesContent":["import { Component, _decorator, Node, AnimationClip, Animation, SpriteFrame, SpriteAtlas } from \"cc\";\nimport { ENUM_EVENT, ENUM_MOVE, FSM_PARAMS_TYPE_ENUM, PARAMS_NAME_TYPE } from \"../../Enum\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\nimport { StateMachine } from \"./SateMachine\";\nimport State from \"./State\";\n\n\nconst { ccclass, property } = _decorator;\n@ccclass('SubStateMachine')\nexport abstract class SubStateMachine extends Component {\n    constructor(fsm: StateMachine) {\n        super()\n    }\n    private _currentSate: State = null\n    stateMachine: Map<string, State> = new Map()  //动画state列表\n\n    animationCom: Animation = null\n\n    waitList: Array<Promise<SpriteAtlas>> = []\n\n    get currentSate() {\n        return this._currentSate\n    }\n\n    set currentSate(newSate) {\n        this._currentSate = newSate\n        this._currentSate.run()\n    }\n\n    resetTrigger() {\n        for (const [_, data] of this.params) {\n            if (data.type == FSM_PARAMS_TYPE_ENUM.TRIGGER) {\n                data.value = false\n            }\n        }\n    }\n\n    abstract run(): void\n}"]}