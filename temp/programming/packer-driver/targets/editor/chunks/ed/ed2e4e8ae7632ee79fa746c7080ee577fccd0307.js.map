{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/UI/DrawManager.ts"],"names":["BlockInputEvents","Color","Component","game","Graphics","UITransform","view","_decorator","ccclass","SCREEN_WIDTH","getVisibleSize","width","SCREEN_HEIGHT","height","DEFAULT_FADE_DURATION","FadeStatus","DrawManager","oldTime","duration","fadeStatus","IDLE","fadeResolve","faderNode","ctx","block","init","addComponent","transform","getComponent","setAnchorPoint","setContentSize","setAlpha","percent","clear","rect","fillColor","fill","enabled","update","fadePercent","totalTime","console","log","FADE_IN","FADE_OUT","fadeIn","Promise","resolve","fadeOut","mask","setTimeout"],"mappings":"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","sourcesContent":["import { BlockInputEvents, Color, Component, game, Graphics, UITransform, view, _decorator } from 'cc'\nconst { ccclass } = _decorator\nconst SCREEN_WIDTH = view.getVisibleSize().width\nconst SCREEN_HEIGHT = view.getVisibleSize().height\n\nexport const DEFAULT_FADE_DURATION = 200\n\nenum FadeStatus {\n    IDLE,\n    FADE_IN,\n    FADE_OUT,\n}\n\n@ccclass('DrawManager')\nexport class DrawManager extends Component {\n    oldTime: number = 0\n    duration: number = DEFAULT_FADE_DURATION\n    fadeStatus: FadeStatus = FadeStatus.IDLE\n    fadeResolve: (value: PromiseLike<null>) => void\n\n    faderNode: Node\n    ctx: Graphics\n    block: BlockInputEvents\n\n    init() {\n        this.block = this.addComponent(BlockInputEvents)\n        this.ctx = this.addComponent(Graphics)\n        const transform = this.getComponent(UITransform)\n        transform.setAnchorPoint(0.5, 0.5)\n        transform.setContentSize(SCREEN_WIDTH, SCREEN_HEIGHT)\n        this.setAlpha(1)\n    }\n\n    private setAlpha(percent: number) {\n        this.ctx.clear()\n        this.ctx.rect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)\n        this.ctx.fillColor = new Color(0, 0, 0, 255 * percent)\n        this.ctx.fill()\n        this.block.enabled = percent === 1\n    }\n\n    update() {\n        const fadePercent = (game.totalTime - this.oldTime) / this.duration\n        console.log('fadePercent:', fadePercent)\n        switch (this.fadeStatus) {\n            case FadeStatus.FADE_IN:\n                if (fadePercent < 1) {\n                    this.setAlpha(fadePercent)\n                } else {\n                    this.fadeStatus = FadeStatus.IDLE\n                    this.setAlpha(1)\n                    this.fadeResolve(null)\n                }\n                break\n            case FadeStatus.FADE_OUT:\n                if (fadePercent < 1) {\n                    this.setAlpha(1 - fadePercent)\n                } else {\n                    this.fadeStatus = FadeStatus.IDLE\n                    this.setAlpha(0)\n                    this.fadeResolve(null)\n                }\n                break\n            default:\n                break\n        }\n    }\n\n    fadeIn(duration: number = DEFAULT_FADE_DURATION) {\n        this.setAlpha(0)\n        this.duration = duration\n        this.fadeStatus = FadeStatus.FADE_IN\n        this.oldTime = game.totalTime\n        return new Promise(resolve => {\n            this.fadeResolve = resolve\n        })\n    }\n\n    fadeOut(duration: number = DEFAULT_FADE_DURATION) {\n        this.setAlpha(1)\n        this.duration = duration\n        this.fadeStatus = FadeStatus.FADE_OUT\n        this.oldTime = game.totalTime\n        return new Promise(resolve => {\n            this.fadeResolve = resolve\n        })\n    }\n\n    mask() {\n        this.setAlpha(1)\n        return new Promise(resolve => {\n            setTimeout(resolve, DEFAULT_FADE_DURATION)\n        })\n    }\n}"]}