{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Scene/UIBattleScene.ts"],"names":["Component","_decorator","ENITIY_TYPE_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","levels","EventMgr","BurstMgr","DoorMgr","IronMgr","WoodenMgr","PlayerMrg","DataManager","FadeMgr","ShakeManager","SmokeMgr","SpikesMgr","TileMapManager","createNewNode","TILE_WIDTH","TILE_HEIGHT","ccclass","property","UIBattleScene","level","stage","smokeLayer","start","Instance","levelIndex","generateStage","initLevel","onLoad","addEventListen","ENUM_NEXTLEVEL","nextLevelMap","ENUM_MOVE_END","checkArrived","ENUM_SHOW_SMOKE","showSmokeHandler","ENUM_RECORD_STEP","saveRecord","ENUM_REVOKE_STEP","revokeRecord","onDestry","unEventListen","fader","fadeIn","clearLevelMap","mapInfo","mapColumCount","length","mapRowCount","Promise","all","generateTileMap","generateBurst","generateEnemies","generateSpikes","generateDoor","generateSmokeLayer","generatePlayer","fitPos","fadeOut","removeAllChildren","reset","x","playerX","y","playerY","playerInfo","doorX","doorY","state","doorState","doorInfo","DEATH","emit","direction","smokeItem","smokes","find","smoke","node","setPosition","smokeNode","setParent","smokeMgr","addComponent","init","IDLE","type","SMOKE","push","stageNode","tileMapNode","tileMapManager","playerNode","playerManager","player","ENUM_PLAYER_BORN","enemies","promises","i","enemy","Manager","WOODEN","manager","bursts","burst","burstManager","spikes","spikesManager","doorManager","door","disX","disY","getComponent","stop","item","ATTACK","_type","map","count","records","pop","tartgetX","tartgetY","index","spike"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node } from \"cc\";\nimport { DIRECTION_ENUM, ENITIY_TYPE_ENUM, ENITIY_TYPE_SPIKES_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT } from \"../../Enum\";\nimport levels, { ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport { BurstMgr } from \"../Burst/BurstMgr\";\nimport { DoorMgr } from \"../Door/DoorMgr\";\nimport { IronMgr } from \"../Enemy/Iron/IronMgr\";\nimport { WoodenMgr } from \"../Enemy/Wooden/WoodenMgr\";\nimport { PlayerMrg } from \"../Player/PlayerMgr\";\nimport DataManager, { IRecord } from \"../Runtime/DataManager\";\nimport FadeMgr from \"../Runtime/FadeMgr\";\nimport { ShakeManager } from \"../Runtime/ShakeManager\";\nimport { SmokeMgr } from \"../Smoke/SmokeMgr\";\nimport { SpikesMgr } from \"../Spikes/SpikesMgr\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\n\nconst TILE_WIDTH = 55\nconst TILE_HEIGHT = 55\nconst { ccclass, property } = _decorator;\n@ccclass('UIBattleScene')\nexport class UIBattleScene extends Component {\n    level: ILevel\n    stage: Node\n    smokeLayer: Node\n\n    start() {\n        DataManager.Instance.levelIndex = 1\n        this.generateStage()\n        this.initLevel()\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_END, this.checkArrived, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_SHOW_SMOKE, this.showSmokeHandler, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_RECORD_STEP, this.saveRecord, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_REVOKE_STEP, this.revokeRecord, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_END, this.checkArrived)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_SHOW_SMOKE, this.showSmokeHandler)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_RECORD_STEP, this.saveRecord)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_REVOKE_STEP, this.revokeRecord)\n    }\n\n    async initLevel() {\n        FadeMgr.Instance.fader.fadeIn()\n        this.clearLevelMap()\n        this.level = levels[`level${DataManager.Instance.levelIndex}`]\n        if (this.level) {\n            DataManager.Instance.mapInfo = this.level.mapInfo\n            DataManager.Instance.mapColumCount = this.level.mapInfo[0].length //列\n            DataManager.Instance.mapRowCount = this.level.mapInfo.length\n        }\n\n        await Promise.all([\n            this.generateTileMap(),\n            this.generateBurst(),\n            this.generateEnemies(),\n            this.generateSpikes(),\n            this.generateDoor(),\n            this.generateSmokeLayer(),\n            this.generatePlayer(),\n            this.fitPos()\n        ])\n\n        FadeMgr.Instance.fader.fadeOut()\n    }\n\n    nextLevelMap() {\n        DataManager.Instance.levelIndex++\n        this.initLevel()\n    }\n\n    clearLevelMap() {\n        this.stage.removeAllChildren()\n        DataManager.Instance.reset()\n    }\n\n    checkArrived() {\n        const { x: playerX, y: playerY } = DataManager.Instance.playerInfo\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo\n\n        if (playerX === doorX && playerY === doorY &&\n            doorState === ENTITY_STATE_ENUM.DEATH) {\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_NEXTLEVEL)\n        }\n    }\n\n    async showSmokeHandler(x: number, y: number, direction: DIRECTION_ENUM) {\n        const smokeItem = DataManager.Instance.smokes.find(smoke => smoke.state === ENTITY_STATE_ENUM.DEATH)\n        if (smokeItem) {\n            smokeItem.x = x\n            smokeItem.y = y\n            smokeItem.direction = direction\n            smokeItem.node.setPosition(x * TILE_WIDTH - TILE_WIDTH * 1.5, -y * TILE_HEIGHT + TILE_HEIGHT * 1.5)\n        } else {\n            const smokeNode = createNewNode()\n            smokeNode.setParent(this.smokeLayer)\n            const smokeMgr = smokeNode.addComponent(SmokeMgr)\n            await smokeMgr.init({\n                x,\n                y,\n                state: ENTITY_STATE_ENUM.IDLE,\n                type: ENITIY_TYPE_ENUM.SMOKE,\n                direction\n            })\n\n            DataManager.Instance.smokes.push(smokeMgr)\n        }\n    }\n\n    generateStage() {\n        const stageNode = createNewNode()\n        stageNode.setParent(this.node)\n        this.stage = stageNode\n        this.stage.addComponent(ShakeManager)\n    }\n\n    async generateTileMap() {\n        const tileMapNode = createNewNode()\n        tileMapNode.setParent(this.stage)\n        const tileMapManager = tileMapNode.addComponent(TileMapManager)\n        await tileMapManager.init()\n    }\n\n    async generatePlayer() {\n        const playerNode = createNewNode()\n        playerNode.setParent(this.stage)\n        const playerManager = playerNode.addComponent(PlayerMrg)\n        await playerManager.init(this.level.player)\n        DataManager.Instance.playerInfo = playerManager\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_PLAYER_BORN)\n    }\n\n    async generateEnemies() {\n        DataManager.Instance.enemies = []\n        const promises = []\n        for (let i = 0; i < this.level.enemies.length; i++) {\n            const enemy = this.level.enemies[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const Manager = enemy.type === ENITIY_TYPE_ENUM.WOODEN ? WoodenMgr : IronMgr\n            const manager = node.addComponent(Manager)\n            promises.push(manager.init(enemy))\n            DataManager.Instance.enemies.push(manager)\n        }\n\n        await Promise.all(promises)\n    }\n\n    async generateBurst() {\n        const promises = []\n        for (let i = 0; i < this.level.bursts.length; i++) {\n            const burst = this.level.bursts[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const burstManager = node.addComponent(BurstMgr)\n            promises.push(burstManager.init(burst))\n            DataManager.Instance.bursts.push(burstManager)\n        }\n        await Promise.all(promises)\n    }\n\n    async generateSpikes() {\n        const promises = []\n        for (let i = 0; i < this.level.spikes.length; i++) {\n            const spikes = this.level.spikes[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const spikesManager = node.addComponent(SpikesMgr)\n            promises.push(spikesManager.init(spikes))\n            DataManager.Instance.spikes.push(spikesManager)\n        }\n        await Promise.all(promises)\n    }\n\n    generateSmokeLayer() {\n        const node = createNewNode()\n        this.smokeLayer = node\n        node.setParent(this.stage)\n    }\n\n    async generateDoor() {\n        const node = createNewNode()\n        node.setParent(this.stage)\n        const doorManager = node.addComponent(DoorMgr)\n        await doorManager.init(this.level.door)\n        DataManager.Instance.doorInfo = doorManager\n    }\n\n    fitPos() {\n        const { mapColumCount, mapRowCount } = DataManager.Instance\n        const disX = TILE_WIDTH * mapRowCount / 2\n        const disY = TILE_HEIGHT * mapColumCount / 2 + 100\n        this.stage.getComponent(ShakeManager).stop()\n        this.stage.setPosition(-disX, disY)\n    }\n\n    saveRecord() {\n        const item: IRecord = {\n            player: {\n                x: DataManager.Instance.playerInfo.x,\n                y: DataManager.Instance.playerInfo.y,\n                direction: DataManager.Instance.playerInfo.direction,\n                state: DataManager.Instance.playerInfo.state === ENTITY_STATE_ENUM.IDLE ||\n                    DataManager.Instance.playerInfo.state === ENTITY_STATE_ENUM.ATTACK ||\n                    DataManager.Instance.playerInfo.state === ENTITY_STATE_ENUM.DEATH\n                    ? DataManager.Instance.playerInfo.state : ENTITY_STATE_ENUM.IDLE\n                ,\n                type: DataManager.Instance.playerInfo._type,\n            },\n            door: {\n                x: DataManager.Instance.doorInfo.x,\n                y: DataManager.Instance.doorInfo.y,\n                direction: DataManager.Instance.doorInfo.direction,\n                state: DataManager.Instance.doorInfo.state,\n                type: DataManager.Instance.doorInfo._type,\n            },\n            enemies: DataManager.Instance.enemies.map(({ x, y, type, state, direction }) => ({\n                x, y, type, state, direction\n            })),\n            bursts: DataManager.Instance.bursts.map(({ x, y, type, state, direction }) => ({\n                x, y, type, state, direction\n            })),\n            spikes: DataManager.Instance.spikes.map(({ x, y, count, type }) => ({\n                x, y, count, type\n            })),\n        }\n\n        DataManager.Instance.records.push(item)\n    }\n\n    revokeRecord() {\n        const item = DataManager.Instance.records.pop()\n        if (item) {\n            DataManager.Instance.playerInfo.x = DataManager.Instance.playerInfo.tartgetX = item.player.x\n            DataManager.Instance.playerInfo.y = DataManager.Instance.playerInfo.tartgetY = item.player.y\n            DataManager.Instance.playerInfo.direction = item.player.direction\n            DataManager.Instance.playerInfo.state = item.player.state\n            DataManager.Instance.playerInfo.type = item.player.type\n\n            DataManager.Instance.doorInfo.x = item.door.x\n            DataManager.Instance.doorInfo.y = item.door.y\n            DataManager.Instance.doorInfo.direction = item.door.direction\n            DataManager.Instance.doorInfo.state = item.door.state\n            DataManager.Instance.doorInfo.type = item.door.type\n\n            for (let index = 0; index < DataManager.Instance.enemies.length; index++) {\n                const enemy = item.enemies[index];\n                DataManager.Instance.enemies[index].x = enemy.x\n                DataManager.Instance.enemies[index].y = enemy.y\n                DataManager.Instance.enemies[index].direction = enemy.direction\n                DataManager.Instance.enemies[index].state = enemy.state\n                DataManager.Instance.enemies[index].type = enemy.type\n            }\n\n            for (let index = 0; index < DataManager.Instance.bursts.length; index++) {\n                const burst = item.enemies[index];\n                DataManager.Instance.bursts[index].x = burst.x\n                DataManager.Instance.bursts[index].y = burst.y\n                DataManager.Instance.bursts[index].direction = burst.direction\n                DataManager.Instance.bursts[index].state = burst.state\n                DataManager.Instance.bursts[index].type = burst.type\n            }\n\n            for (let index = 0; index < DataManager.Instance.spikes.length; index++) {\n                const spike = item.spikes[index];\n                DataManager.Instance.spikes[index].x = spike.x\n                DataManager.Instance.spikes[index].y = spike.y\n                DataManager.Instance.spikes[index].count = spike.count\n                DataManager.Instance.spikes[index].type = spike.type\n            }\n        }\n    }\n}"]}