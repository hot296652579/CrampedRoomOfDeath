{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Scene/UIBattleScene.ts"],"names":["Component","_decorator","ENITIY_TYPE_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","levels","EventMgr","BurstMgr","DoorMgr","IronMgr","WoodenMgr","PlayerMrg","DataManager","SmokeMgr","SpikesMgr","TileMapManager","createNewNode","TILE_WIDTH","TILE_HEIGHT","ccclass","property","UIBattleScene","level","stage","start","Instance","levelIndex","generateStage","initLevel","onLoad","addEventListen","ENUM_NEXTLEVEL","nextLevelMap","ENUM_MOVE_END","checkArrived","ENUM_SHOW_SMOKE","showSmokeHandler","onDestry","unEventListen","clearLevelMap","mapInfo","mapColumCount","length","mapRowCount","generateTileMap","generateBurst","generateEnemies","generateSpikes","generateDoor","generatePlayer","fitPos","removeAllChildren","reset","x","playerX","y","playerY","playerInfo","doorX","doorY","state","doorState","doorInfo","DEATH","emit","direction","smokeNode","setParent","smokeMgr","addComponent","init","IDLE","type","SMOKE","stageNode","node","tileMapNode","tileMapManager","playerNode","playerManager","player","ENUM_PLAYER_BORN","enemies","promises","i","enemy","Manager","WOODEN","manager","push","Promise","all","bursts","burst","burstManager","spikes","spikesManager","doorManager","door","disX","disY","setPosition"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node } from \"cc\";\nimport { DIRECTION_ENUM, ENITIY_TYPE_ENUM, ENITIY_TYPE_SPIKES_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT } from \"../../Enum\";\nimport levels, { ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport { BurstMgr } from \"../Burst/BurstMgr\";\nimport { DoorMgr } from \"../Door/DoorMgr\";\nimport { IronMgr } from \"../Enemy/Iron/IronMgr\";\nimport { WoodenMgr } from \"../Enemy/Wooden/WoodenMgr\";\nimport { PlayerMrg } from \"../Player/PlayerMgr\";\nimport DataManager from \"../Runtime/DataManager\";\nimport { SmokeMgr } from \"../Smoke/SmokeMgr\";\nimport { SpikesMgr } from \"../Spikes/SpikesMgr\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\n\nconst TILE_WIDTH = 55\nconst TILE_HEIGHT = 55\nconst { ccclass, property } = _decorator;\n@ccclass('UIBattleScene')\nexport class UIBattleScene extends Component {\n    level: ILevel\n    stage: Node\n    start() {\n        DataManager.Instance.levelIndex = 1\n        this.generateStage()\n        this.initLevel()\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_END, this.checkArrived, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_SHOW_SMOKE, this.showSmokeHandler, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_END, this.checkArrived)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_SHOW_SMOKE, this.showSmokeHandler)\n    }\n\n    initLevel() {\n        this.clearLevelMap()\n        this.level = levels[`level${DataManager.Instance.levelIndex}`]\n        if (this.level) {\n            DataManager.Instance.mapInfo = this.level.mapInfo\n            DataManager.Instance.mapColumCount = this.level.mapInfo[0].length //åˆ—\n            DataManager.Instance.mapRowCount = this.level.mapInfo.length\n        }\n\n        this.generateTileMap()\n        this.generateBurst()\n        this.generateEnemies()\n        this.generateSpikes()\n        this.generateDoor()\n        this.generatePlayer()\n        this.fitPos()\n    }\n\n    nextLevelMap() {\n        DataManager.Instance.levelIndex++\n        this.initLevel()\n    }\n\n    clearLevelMap() {\n        this.stage.removeAllChildren()\n        DataManager.Instance.reset()\n    }\n\n    checkArrived() {\n        const { x: playerX, y: playerY } = DataManager.Instance.playerInfo\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo\n\n        if (playerX === doorX && playerY === doorY &&\n            doorState === ENTITY_STATE_ENUM.DEATH) {\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_NEXTLEVEL)\n        }\n    }\n\n    async showSmokeHandler(x: number, y: number, direction: DIRECTION_ENUM) {\n        const smokeNode = createNewNode()\n        smokeNode.setParent(this.stage)\n        const smokeMgr = smokeNode.addComponent(SmokeMgr)\n        await smokeMgr.init({\n            x,\n            y,\n            state: ENTITY_STATE_ENUM.IDLE,\n            type: ENITIY_TYPE_ENUM.SMOKE,\n            direction\n        })\n    }\n\n    generateStage() {\n        const stageNode = createNewNode()\n        stageNode.setParent(this.node)\n        this.stage = stageNode\n    }\n\n    async generateTileMap() {\n        const tileMapNode = createNewNode()\n        tileMapNode.setParent(this.stage)\n        const tileMapManager = tileMapNode.addComponent(TileMapManager)\n        await tileMapManager.init()\n    }\n\n    async generatePlayer() {\n        const playerNode = createNewNode()\n        playerNode.setParent(this.stage)\n        const playerManager = playerNode.addComponent(PlayerMrg)\n        await playerManager.init(this.level.player)\n        DataManager.Instance.playerInfo = playerManager\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_PLAYER_BORN)\n    }\n\n    async generateEnemies() {\n        DataManager.Instance.enemies = []\n        const promises = []\n        for (let i = 0; i < this.level.enemies.length; i++) {\n            const enemy = this.level.enemies[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const Manager = enemy.type === ENITIY_TYPE_ENUM.WOODEN ? WoodenMgr : IronMgr\n            const manager = node.addComponent(Manager)\n            promises.push(manager.init(enemy))\n            DataManager.Instance.enemies.push(manager)\n        }\n\n        await Promise.all(promises)\n    }\n\n    async generateBurst() {\n        const promises = []\n        for (let i = 0; i < this.level.bursts.length; i++) {\n            const burst = this.level.bursts[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const burstManager = node.addComponent(BurstMgr)\n            promises.push(burstManager.init(burst))\n            DataManager.Instance.bursts.push(burstManager)\n        }\n        await Promise.all(promises)\n    }\n\n    async generateSpikes() {\n        const promises = []\n        for (let i = 0; i < this.level.spikes.length; i++) {\n            const spikes = this.level.spikes[i]\n            const node = createNewNode()\n            node.setParent(this.stage)\n            const spikesManager = node.addComponent(SpikesMgr)\n            promises.push(spikesManager.init(spikes))\n            DataManager.Instance.spikes.push(spikesManager)\n        }\n        await Promise.all(promises)\n    }\n\n    async generateDoor() {\n        const node = createNewNode()\n        node.setParent(this.stage)\n        const doorManager = node.addComponent(DoorMgr)\n        await doorManager.init(this.level.door)\n        DataManager.Instance.doorInfo = doorManager\n    }\n\n    fitPos() {\n        const { mapColumCount, mapRowCount } = DataManager.Instance\n        const disX = TILE_WIDTH * mapRowCount / 2\n        const disY = TILE_HEIGHT * mapColumCount / 2 + 100\n        this.stage.setPosition(-disX, disY)\n    }\n}"]}