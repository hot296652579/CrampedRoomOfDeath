{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Player/PlayerMgr.ts"],"names":["_decorator","DIRECTION_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","ENUM_BOTTOM_CONTROLLER","EventMgr","DataManager","PlayerStateMachine","EnitiyMgr","MOVE_SPEED","ccclass","property","PlayerMrg","tartgetX","tartgetY","isMoving","init","params","fsm","addComponent","x","y","onLoad","Instance","addEventListen","ENUM_MOVE_PLAYER","inputHanlder","ENUM_ATTACK_PLAYER","onDeathHanlder","ENUM_PLAYER_DEATH","onDestry","unEventListen","update","updateXY","Math","abs","emit","ENUM_MOVE_END","inputDirection","state","DEATH","AIRDEATH","ATTACK","enemyId","willAttack","ENUM_ENEMY_DEATH","ENUM_OPEN_DOOR","willBlock","handlerMove","type","direction","tileMgrInfo","mapColumCount","mapRowCount","doorX","doorY","doorState","doorInfo","enemies","filter","enemy","console","log","TOP","playerNextY","playerNextX","BLOCKFRONT","weaponNextY","nextPlayerTile","nextWeaponTile","canMove","canTurn","checkDoor","checkCollisionDoor","checkEnemy","checkCollisionEnenies","checkBurst","checkBurstCollision","BOTTOM","BLOCKBACK","LEFT","BLOCKRIGHT","weaponNextX","RIGHT","BLOCKLEFT","TURNLEFT","nextY","nextX","BLOCKTURNLEFT","i","length","enemyX","enemyY","TURNRIGHT","BLOCKTURNRIGHT","playerNext","weaponNext","bursts","burst","some","index","id"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node, Sprite, UITransform, Animation, SpriteAtlas, AnimationClip, animation, SpriteFrame, Texture2D, math } from \"cc\";\nimport { DIRECTION_ENUM, DIRECTION_ORDER_ENUM, ENITIY_TYPE_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT, ENUM_BOTTOM_CONTROLLER, PARAMS_NAME_TYPE } from \"../../Enum\";\nimport levels, { IEnitiy, ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport ResourceLoadMgr from \"../Base/ResourceLoadMgr\";\nimport DataManager from \"../Runtime/DataManager\";\nimport { TILE_HEIGHT, TILE_WIDTH } from \"../TileMap/TileManager\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\nimport { PlayerStateMachine } from \"./PlayerStateMachine\";\nimport { EnitiyMgr } from \"../Base/EnitiyMgr\";\nimport { EnemyMgr } from \"../Base/EnemyMgr\";\nimport { BurstMgr } from \"../Burst/BurstMgr\";\n\nexport const MOVE_SPEED = 1 / 10\n\nconst { ccclass, property } = _decorator;\n@ccclass('PlayerMrg')\nexport class PlayerMrg extends EnitiyMgr {\n\n    tartgetX: number = 0\n    tartgetY: number = 0\n    isMoving: boolean = false\n\n    async init(params: IEnitiy) {\n        this.fsm = this.addComponent(PlayerStateMachine)\n        await this.fsm.init()\n\n        super.init(params)\n\n        this.tartgetX = this.x\n        this.tartgetY = this.y\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_PLAYER, this.inputHanlder, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_ATTACK_PLAYER, this.onDeathHanlder, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_PLAYER_DEATH, this.onDeathHanlder, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_PLAYER, this.inputHanlder)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_ATTACK_PLAYER, this.onDeathHanlder)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_PLAYER_DEATH, this.onDeathHanlder)\n    }\n\n    update() {\n        this.updateXY()\n        super.update()\n    }\n\n    updateXY() {\n        if (this.tartgetX < this.x) {\n            this.x -= MOVE_SPEED\n        } else if (this.tartgetX > this.x) {\n            this.x += MOVE_SPEED\n        } else if (this.tartgetY < this.y) {\n            this.y -= MOVE_SPEED\n        } else if (this.tartgetY > this.y) {\n            this.y += MOVE_SPEED\n        }\n\n        if (Math.abs(this.tartgetX - this.x) <= 0.1 && Math.abs(this.tartgetY - this.y) <= 0.1 && this.isMoving) {\n            this.isMoving = false\n            this.x = this.tartgetX\n            this.y = this.tartgetY\n\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n        }\n    }\n\n    inputHanlder(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        if (this.state === ENTITY_STATE_ENUM.DEATH || this.state === ENTITY_STATE_ENUM.AIRDEATH || this.state === ENTITY_STATE_ENUM.ATTACK)\n            return\n\n        if (this.isMoving)\n            return\n\n\n        const enemyId = this.willAttack(inputDirection)\n        if (enemyId) {\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_ENEMY_DEATH, enemyId)\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_OPEN_DOOR)\n            return\n        }\n\n        if (this.willBlock(inputDirection)) {\n            return\n        }\n\n        this.handlerMove(inputDirection)\n    }\n\n    onDeathHanlder(type: ENTITY_STATE_ENUM) {\n        this.state = type\n    }\n\n    willBlock(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const { tileMgrInfo, mapColumCount, mapRowCount } = DataManager.Instance\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo\n        const enemies: EnemyMgr[] = DataManager.Instance.enemies.filter(enemy => enemy.state != ENTITY_STATE_ENUM.DEATH)\n\n        console.log('y', y)\n\n        //先判断输入上时候\n        if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP) {\n            const playerNextY = y - 1\n            const playerNextX = x - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextY <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const weaponNextY = y - 2\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextY, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextY <= 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextY, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextY <= 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKRIGHT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKRIGHT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextY <= 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.LEFT) {\n            const playerNextY = y - 1\n            const playerNextX = x - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextX <= 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextX <= 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextX <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x - 2\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextX <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n            }\n\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.RIGHT) {\n            const playerNextX = x + 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x + 2\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n            const playerNextY = y + 1\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextY, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextY = y + 2\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextY, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (!checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextY, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n            }\n\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT) {\n            let nextY, nextX\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上左转的话，左上角三个tile都必须turnable为true，并且没有敌人\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y - 1\n                nextX = x + 1\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileMgrInfo[x]?.[nextY] || tileMgrInfo[x]?.[nextY].canTurn) &&\n                (!tileMgrInfo[nextX]?.[y] || tileMgrInfo[nextX]?.[y].canTurn) &&\n                (!tileMgrInfo[nextX]?.[nextY] || tileMgrInfo[nextX]?.[nextY].canTurn)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n                return true\n            }\n\n            //判断门\n            if (\n                ((doorX === x && doorY === nextY) ||\n                    (doorX === nextX && doorY === y) ||\n                    (doorX === nextX && doorY === nextY)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n                return true\n            }\n\n            //判断敌人\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if (enemyX === nextX && enemyY === y) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                } else if (enemyX === nextX && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                } else if (enemyX === x && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                }\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT) {\n            let nextX, nextY\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上右转的话，右上角三个tile都必须turnable为true\n                nextY = y - 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y + 1\n                nextX = x + 1\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileMgrInfo[x]?.[nextY] || tileMgrInfo[x]?.[nextY].canTurn) &&\n                (!tileMgrInfo[nextX]?.[y] || tileMgrInfo[nextX]?.[y].canTurn) &&\n                (!tileMgrInfo[nextX]?.[nextY] || tileMgrInfo[nextX]?.[nextY].canTurn)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n                return true\n            }\n\n            //判断门\n            if (\n                ((doorX === x && doorY === nextY) ||\n                    (doorX === nextX && doorY === y) ||\n                    (doorX === nextX && doorY === nextY)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n                return true\n            }\n\n            //判断敌人\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if (enemyX === nextX && enemyY === y) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                } else if (enemyX === nextX && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                } else if (enemyX === x && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                }\n            }\n        }\n\n        return false\n    }\n\n    checkCollisionDoor(playerNext, weaponNext, state: ENTITY_STATE_ENUM, inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo\n\n        if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP || inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n            //判断上下门\n            if (\n                ((doorX === x && doorY === playerNext) || (doorX === x && doorY === weaponNext)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = state\n                console.log('撞到了门')\n                return true\n            }\n        } else {\n            //判断左右门\n            if (\n                ((doorX === playerNext && doorY === y) || (doorX === weaponNext && doorY === weaponNext)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = state\n                console.log('撞到了门')\n                return true\n            }\n        }\n\n\n\n        return false\n    }\n\n    checkCollisionEnenies(playerNext, weaponNext, state: ENTITY_STATE_ENUM, inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const enemies: EnemyMgr[] = DataManager.Instance.enemies.filter(enemy => enemy.state != ENTITY_STATE_ENUM.DEATH)\n\n        if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP || inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if ((enemyX === x && enemyY === weaponNext) || (enemyX === x && enemyY === playerNext)) {\n                    this.state = state\n                    console.log('撞到了敌人')\n                    return true\n                }\n            }\n        }\n\n        return false\n    }\n\n    //判断地裂陷阱\n    checkBurstCollision(playerNext, nextWeaponTile, inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const bursts: BurstMgr[] = DataManager.Instance.bursts.filter(\n            (burst: BurstMgr) => burst.state !== ENTITY_STATE_ENUM.DEATH,\n        )\n\n        if (\n            bursts.some(burst => burst.x === x && burst.y === playerNext) &&\n            (!nextWeaponTile || nextWeaponTile.canTurn)\n        ) {\n            return false\n        }\n    }\n\n    willAttack(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        // let enemies = DataManager.Instance.enemies.filter(enemy => enemy.state != ENTITY_STATE_ENUM.DEATH)\n        let enemies = DataManager.Instance.enemies.filter((enemy) => { return enemy.state != ENTITY_STATE_ENUM.DEATH })\n\n        for (let index = 0; index < enemies.length; index++) {\n            const { x: enemyX, y: enemyY, id } = enemies[index];\n            if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP && this.direction === DIRECTION_ENUM.TOP && enemyX == this.x && enemyY == this.y - 2) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM && this.direction === DIRECTION_ENUM.BOTTOM && enemyX == this.x && enemyY == this.y + 2) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.LEFT && this.direction === DIRECTION_ENUM.LEFT && enemyX == this.x - 2 && enemyY == this.y) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.RIGHT && this.direction === DIRECTION_ENUM.RIGHT && enemyX == this.x + 2 && enemyY == this.y) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            }\n        }\n\n        return ''\n    }\n\n    handlerMove(direction: ENUM_BOTTOM_CONTROLLER) {\n        console.log(DataManager.Instance.tileMgrInfo)\n        switch (direction) {\n            case ENUM_BOTTOM_CONTROLLER.TOP:\n                this.isMoving = true\n                this.tartgetY -= 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.BOTTOM:\n                this.isMoving = true\n                this.tartgetY += 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.LEFT:\n                this.isMoving = true\n                this.tartgetX -= 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.RIGHT:\n                this.isMoving = true\n                this.tartgetX += 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.TURNLEFT:\n                // this.fsm.setParams(PARAMS_NAME_TYPE.TURNLEFT, true)\n\n                if (this.direction === DIRECTION_ENUM.TOP) {\n                    this.direction = DIRECTION_ENUM.LEFT\n                } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n                    this.direction = DIRECTION_ENUM.RIGHT\n                } else if (this.direction === DIRECTION_ENUM.LEFT) {\n                    this.direction = DIRECTION_ENUM.BOTTOM\n                } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n                    this.direction = DIRECTION_ENUM.TOP\n                }\n                this.state = ENTITY_STATE_ENUM.TURNLEFT\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n                break;\n            case ENUM_BOTTOM_CONTROLLER.TURNRIGHT:\n                if (this.direction === DIRECTION_ENUM.TOP) {\n                    this.direction = DIRECTION_ENUM.RIGHT\n                } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n                    this.direction = DIRECTION_ENUM.LEFT\n                } else if (this.direction === DIRECTION_ENUM.LEFT) {\n                    this.direction = DIRECTION_ENUM.TOP\n                } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n                    this.direction = DIRECTION_ENUM.BOTTOM\n                }\n                this.state = ENTITY_STATE_ENUM.TURNRIGHT\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n                break;\n\n            default:\n                break;\n        }\n    }\n}"]}