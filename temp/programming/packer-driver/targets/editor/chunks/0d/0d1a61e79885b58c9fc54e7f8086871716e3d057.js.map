{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Base/State.ts"],"names":["State","animation","AnimationClip","Sprite","SpriteAtlas","ResourceLoadMgr","sortSpriteFrame","ANIMATION_SPEED","constructor","fsm","path","isLoop","WrapMode","Normal","evts","animationClip","init","promise","Instance","loadRes","waitList","push","spriteAtlas","track","ObjectTrack","TrackPath","toComponent","toProperty","spFrames","spriteFrames","frams","index","sortSpFrames","key","Object","prototype","hasOwnProperty","call","element","channel","curve","assignSorted","addTrack","name","wrapMode","duration","length","event","events","run","animationCom","defaultClip","play"],"mappings":"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","sourcesContent":["import { animation, AnimationClip, Sprite, SpriteAtlas, SpriteFrame } from \"cc\";\nimport ResourceLoadMgr from \"./ResourceLoadMgr\";\nimport { PlayerStateMachine } from \"../Player/PlayerStateMachine\";\nimport { StateMachine } from \"./SateMachine\";\nimport { sortSpriteFrame } from \"../Utils\";\nimport { TEST } from \"cc/env\";\n// import { sortSpriteFrame } from \"../Utils\";\n\nexport const ANIMATION_SPEED = 1 / 8\n\n\n/**真正播动画的地方*/\nexport default class State {\n    animationClip: AnimationClip\n    constructor(private fsm: StateMachine, private path: string, private isLoop: AnimationClip.WrapMode = AnimationClip.WrapMode.Normal, private evts: any[] = []) {\n        this.init()\n    }\n\n    async init() {\n        const promise = ResourceLoadMgr.Instance.loadRes(this.path, SpriteAtlas)\n        this.fsm.waitList.push(promise)\n        const spriteAtlas = await promise\n        this.animationClip = new AnimationClip();\n\n        const track = new animation.ObjectTrack(); // 创建一个对象轨道\n        track.path = new animation.TrackPath().toComponent(Sprite).toProperty('spriteFrame'); // 找子节点组件 以及属性\n\n        const spFrames = spriteAtlas.spriteFrames\n        const frams: Array<[number, SpriteFrame]> = []\n\n        let index = 0\n        let sortSpFrames = sortSpriteFrame(spFrames)\n        for (const key in sortSpFrames) {\n            if (Object.prototype.hasOwnProperty.call(sortSpFrames, key)) {\n                const element = sortSpFrames[key];\n                frams.push([ANIMATION_SPEED * index, element])\n                index++\n            }\n        }\n        // console.log(frams)\n        track.channel.curve.assignSorted(frams)\n\n        // // 最后将轨道添加到动画剪辑以应用\n        this.animationClip.addTrack(track)\n        this.animationClip.name = this.path\n        this.animationClip.wrapMode = this.isLoop\n        this.animationClip.duration = frams.length * ANIMATION_SPEED; // 整个动画剪辑的周期\n\n        for (const event of this.evts) {\n            this.animationClip.events.push(event)\n        }\n    }\n\n    run() {\n        if (this.fsm.animationCom?.defaultClip?.name === this.animationClip.name)\n            return\n\n        this.fsm.animationCom.defaultClip = this.animationClip\n        this.fsm.animationCom.play()\n    }\n}"]}