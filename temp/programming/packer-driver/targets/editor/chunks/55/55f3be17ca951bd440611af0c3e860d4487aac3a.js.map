{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Player/PlayerMgr.ts"],"names":["_decorator","DIRECTION_ENUM","ENITIY_TYPE_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","ENUM_BOTTOM_CONTROLLER","EventMgr","DataManager","PlayerStateMachine","EnitiyMgr","MOVE_SPEED","ccclass","property","PlayerMrg","tartgetX","tartgetY","isMoving","init","fsm","addComponent","x","y","type","PLAYER","state","IDLE","direction","TOP","onLoad","Instance","addEventListen","ENUM_MOVE_PLAYER","inputHanlder","ENUM_PLAYER_DEATH","onDeathHanlder","onDestry","unEventListen","update","updateXY","Math","abs","emit","ENUM_MOVE_END","inputDirection","DEATH","AIRDEATH","ATTACK","willBlock","console","log","enemyId","willAttack","ENUM_ENEMY_DEATH","ENUM_OPEN_DOOR","handlerMove","tileMgrInfo","mapColumCount","mapRowCount","playerNextY","BLOCKFRONT","weaponNextY","nextPlayerTile","nextWeaponTile","canMove","canTurn","BOTTOM","BLOCKBACK","LEFT","BLOCKRIGHT","weaponNextX","RIGHT","BLOCKLEFT","playerNextX","TURNLEFT","nextY","nextX","BLOCKTURNLEFT","TURNRIGHT","BLOCKTURNRIGHT","enemies","filter","enemy","index","length","enemyX","enemyY","id"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node, Sprite, UITransform, Animation, SpriteAtlas, AnimationClip, animation, SpriteFrame, Texture2D, math } from \"cc\";\nimport { DIRECTION_ENUM, DIRECTION_ORDER_ENUM, ENITIY_TYPE_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT, ENUM_BOTTOM_CONTROLLER, PARAMS_NAME_TYPE } from \"../../Enum\";\nimport levels, { ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport ResourceLoadMgr from \"../Base/ResourceLoadMgr\";\nimport DataManager from \"../Runtime/DataManager\";\nimport { TILE_HEIGHT, TILE_WIDTH } from \"../TileMap/TileManager\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\nimport { PlayerStateMachine } from \"./PlayerStateMachine\";\nimport { EnitiyMgr } from \"../Base/EnitiyMgr\";\n\nexport const MOVE_SPEED = 1 / 10\n\nconst { ccclass, property } = _decorator;\n@ccclass('PlayerMrg')\nexport class PlayerMrg extends EnitiyMgr {\n\n    tartgetX: number = 0\n    tartgetY: number = 0\n    isMoving: boolean = false\n\n    async init() {\n        this.fsm = this.addComponent(PlayerStateMachine)\n        await this.fsm.init()\n\n        super.init({\n            x: 2,\n            y: 7,\n            type: ENITIY_TYPE_ENUM.PLAYER,\n            state: ENTITY_STATE_ENUM.IDLE,\n            direction: DIRECTION_ENUM.TOP\n        })\n\n        this.tartgetX = this.x\n        this.tartgetY = this.y\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_PLAYER, this.inputHanlder, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_PLAYER_DEATH, this.onDeathHanlder, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_PLAYER, this.inputHanlder)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_PLAYER_DEATH, this.onDeathHanlder)\n    }\n\n    update() {\n        this.updateXY()\n        super.update()\n    }\n\n    updateXY() {\n        if (this.tartgetX < this.x) {\n            this.x -= MOVE_SPEED\n        } else if (this.tartgetX > this.x) {\n            this.x += MOVE_SPEED\n        } else if (this.tartgetY < this.y) {\n            this.y -= MOVE_SPEED\n        } else if (this.tartgetY > this.y) {\n            this.y += MOVE_SPEED\n        }\n\n        if (Math.abs(this.tartgetX - this.x) <= 0.1 && Math.abs(this.tartgetY - this.y) <= 0.1 && this.isMoving) {\n            this.isMoving = false\n            this.x = this.tartgetX\n            this.y = this.tartgetY\n\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n        }\n    }\n\n    inputHanlder(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        if (this.state === ENTITY_STATE_ENUM.DEATH || this.state === ENTITY_STATE_ENUM.AIRDEATH || this.state === ENTITY_STATE_ENUM.ATTACK)\n            return\n\n        if (this.isMoving)\n            return\n\n        if (this.willBlock(inputDirection)) {\n            console.log('block!!!!')\n            return\n        }\n\n        const enemyId = this.willAttack(inputDirection)\n        if (enemyId) {\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_ENEMY_DEATH, enemyId)\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_OPEN_DOOR)\n            return\n        }\n\n        this.handlerMove(inputDirection)\n    }\n\n    onDeathHanlder(type: ENTITY_STATE_ENUM) {\n        this.state = type\n    }\n\n    willBlock(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const { tileMgrInfo, mapColumCount, mapRowCount } = DataManager.Instance\n\n        console.log('y', y)\n\n        //先判断输入上时候\n        if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP) {\n            const playerNextY = y - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextY <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const weaponNextY = y - 2\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextY <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextY <= 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextY <= 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.LEFT) {\n            const playerNextX = x - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextX <= 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextX <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextX <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x - 2\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextX <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n            }\n\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.RIGHT) {\n            const playerNextX = x + 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x + 2\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n            const playerNextY = y + 1\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextY = y + 2\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n            }\n\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT) {\n            let nextY, nextX\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上左转的话，左上角三个tile都必须turnable为true，并且没有敌人\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y - 1\n                nextX = x + 1\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileMgrInfo[x]?.[nextY] || tileMgrInfo[x]?.[nextY].canTurn) &&\n                (!tileMgrInfo[nextX]?.[y] || tileMgrInfo[nextX]?.[y].canTurn) &&\n                (!tileMgrInfo[nextX]?.[nextY] || tileMgrInfo[nextX]?.[nextY].canTurn)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n                return true\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT) {\n            let nextX, nextY\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上右转的话，右上角三个tile都必须turnable为true\n                nextY = y - 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y + 1\n                nextX = x + 1\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileMgrInfo[x]?.[nextY] || tileMgrInfo[x]?.[nextY].canTurn) &&\n                (!tileMgrInfo[nextX]?.[y] || tileMgrInfo[nextX]?.[y].canTurn) &&\n                (!tileMgrInfo[nextX]?.[nextY] || tileMgrInfo[nextX]?.[nextY].canTurn)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n                return true\n            }\n        }\n\n        return false\n    }\n\n    willAttack(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        // let enemies = DataManager.Instance.enemies.filter(enemy => enemy.state != ENTITY_STATE_ENUM.DEATH)\n        let enemies = DataManager.Instance.enemies.filter((enemy) => { return enemy.state != ENTITY_STATE_ENUM.DEATH })\n\n        for (let index = 0; index < enemies.length; index++) {\n            const { x: enemyX, y: enemyY, id } = enemies[index];\n            if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP && this.direction === DIRECTION_ENUM.TOP && enemyX == this.x && enemyY == this.y - 2) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM && this.direction === DIRECTION_ENUM.BOTTOM && enemyX == this.x && enemyY == this.y + 2) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.LEFT && this.direction === DIRECTION_ENUM.LEFT && enemyX == this.x - 2 && enemyY == this.y) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.RIGHT && this.direction === DIRECTION_ENUM.RIGHT && enemyX == this.x + 2 && enemyY == this.y) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            }\n        }\n\n        return ''\n    }\n\n    handlerMove(direction: ENUM_BOTTOM_CONTROLLER) {\n        console.log(DataManager.Instance.tileMgrInfo)\n        switch (direction) {\n            case ENUM_BOTTOM_CONTROLLER.TOP:\n                this.isMoving = true\n                this.tartgetY -= 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.BOTTOM:\n                this.isMoving = true\n                this.tartgetY += 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.LEFT:\n                this.isMoving = true\n                this.tartgetX -= 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.RIGHT:\n                this.isMoving = true\n                this.tartgetX += 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.TURNLEFT:\n                // this.fsm.setParams(PARAMS_NAME_TYPE.TURNLEFT, true)\n\n                if (this.direction === DIRECTION_ENUM.TOP) {\n                    this.direction = DIRECTION_ENUM.LEFT\n                } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n                    this.direction = DIRECTION_ENUM.RIGHT\n                } else if (this.direction === DIRECTION_ENUM.LEFT) {\n                    this.direction = DIRECTION_ENUM.BOTTOM\n                } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n                    this.direction = DIRECTION_ENUM.TOP\n                }\n                this.state = ENTITY_STATE_ENUM.TURNLEFT\n                break;\n            case ENUM_BOTTOM_CONTROLLER.TURNRIGHT:\n                if (this.direction === DIRECTION_ENUM.TOP) {\n                    this.direction = DIRECTION_ENUM.RIGHT\n                } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n                    this.direction = DIRECTION_ENUM.LEFT\n                } else if (this.direction === DIRECTION_ENUM.LEFT) {\n                    this.direction = DIRECTION_ENUM.TOP\n                } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n                    this.direction = DIRECTION_ENUM.BOTTOM\n                }\n                this.state = ENTITY_STATE_ENUM.TURNRIGHT\n                break;\n\n            default:\n                break;\n        }\n    }\n}"]}