{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Player/PlayerStateMachine.ts"],"names":["Component","_decorator","AnimationClip","Animation","FSM_PARAMS_TYPE_ENUM","PARAMS_NAME_TYPE","Sate","getParamsInitValue","type","TRIGGER","value","ccclass","property","PlayerStateMachine","_currentSate","params","Map","stateMachine","animationCom","waitList","getParams","paramsName","has","get","setParams","run","resetTrigger","currentSate","newSate","init","addComponent","initParams","initSateMachine","addAnimationEvent","Promise","all","set","IDEL","TURNLEFT","WrapMode","Loop","on","EventType","FINISHED","animationName","defaultClip","name","list","some","v","includes","_","data"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node, AnimationClip, Animation, SpriteFrame, SpriteAtlas } from \"cc\";\nimport { ENUM_EVENT, ENUM_MOVE, FSM_PARAMS_TYPE_ENUM, PARAMS_NAME_TYPE } from \"../../Enum\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\nimport Sate from \"./State\";\nimport State from \"./State\";\n\n\ntype ParamsTypeValue = boolean | number\n\nexport interface IParamsVaule {\n    type: FSM_PARAMS_TYPE_ENUM,\n    value: ParamsTypeValue\n}\n\nexport const getParamsInitValue = () => {\n    return {\n        type: FSM_PARAMS_TYPE_ENUM.TRIGGER,\n        value: false\n    }\n}\n\nconst { ccclass, property } = _decorator;\n@ccclass('PlayerStateMachine')\nexport class PlayerStateMachine extends Component {\n    private _currentSate: State = null\n    params: Map<string, IParamsVaule> = new Map() //参数列表\n    stateMachine: Map<string, State> = new Map()  //动画state列表\n\n    animationCom: Animation = null\n\n    waitList: Array<Promise<SpriteAtlas>> = []\n\n\n    getParams(paramsName: string) {\n        if (this.params.has(paramsName)) {\n            return this.params.get(paramsName)\n        }\n    }\n\n    setParams(paramsName: string, value: ParamsTypeValue) {\n        if (this.params.has(paramsName)) {\n            this.params.get(paramsName).value = value\n            this.run()\n            this.resetTrigger()\n        }\n    }\n\n    get currentSate() {\n        return this._currentSate\n    }\n\n    set currentSate(newSate) {\n        this._currentSate = newSate\n        this._currentSate.run()\n    }\n    async init() {\n        this.animationCom = this.addComponent(Animation)\n\n        this.initParams()\n        this.initSateMachine()\n        this.addAnimationEvent()\n\n        await Promise.all(this.waitList)\n    }\n\n    initParams() {\n        this.params.set(PARAMS_NAME_TYPE.IDEL, getParamsInitValue())\n        this.params.set(PARAMS_NAME_TYPE.TURNLEFT, getParamsInitValue())\n    }\n\n    initSateMachine() {\n        this.stateMachine.set(PARAMS_NAME_TYPE.IDEL, new Sate(this, 'texture/player/idle/top/idle', AnimationClip.WrapMode.Loop))\n        this.stateMachine.set(PARAMS_NAME_TYPE.TURNLEFT, new Sate(this, 'texture/player/turnleft/top/turnleft'))\n    }\n\n    addAnimationEvent() {\n        this.animationCom.on(Animation.EventType.FINISHED, () => {\n            const animationName = this.animationCom.defaultClip.name\n            const list = ['turn']\n\n            if (list.some(v => animationName.includes(v))) {\n                this.setParams(PARAMS_NAME_TYPE.IDEL, true)\n            }\n        })\n    }\n\n    run() {\n        switch (this.currentSate) {\n            case this.stateMachine.get(PARAMS_NAME_TYPE.TURNLEFT):\n\n                break;\n            case this.stateMachine.get(PARAMS_NAME_TYPE.IDEL):\n                if (this.params.get(PARAMS_NAME_TYPE.TURNLEFT).value) {\n                    this.currentSate = this.stateMachine.get(PARAMS_NAME_TYPE.TURNLEFT)\n                } else if (this.params.get(PARAMS_NAME_TYPE.IDEL).value) {\n                    this.currentSate = this.stateMachine.get(PARAMS_NAME_TYPE.IDEL)\n                }\n                break;\n\n            default:\n                this.currentSate = this.stateMachine.get(PARAMS_NAME_TYPE.IDEL)\n                break;\n        }\n    }\n\n    resetTrigger() {\n        for (const [_, data] of this.params) {\n            if (data.type == FSM_PARAMS_TYPE_ENUM.TRIGGER) {\n                data.value = false\n            }\n        }\n    }\n}"]}