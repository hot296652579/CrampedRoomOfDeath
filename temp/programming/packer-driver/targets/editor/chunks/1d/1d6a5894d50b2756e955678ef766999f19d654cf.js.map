{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Player/PlayerMgr.ts"],"names":["_decorator","DIRECTION_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","ENUM_BOTTOM_CONTROLLER","SHAKE_TYPE_ENUM","EventMgr","DataManager","PlayerStateMachine","EnitiyMgr","MOVE_SPEED","ccclass","property","PlayerMrg","tartgetX","tartgetY","isMoving","init","params","fsm","addComponent","x","y","onLoad","Instance","addEventListen","ENUM_MOVE_PLAYER","inputHanlder","ENUM_ATTACK_PLAYER","onDeathHanlder","ENUM_PLAYER_DEATH","onDestry","unEventListen","update","updateXY","Math","abs","emit","ENUM_MOVE_END","inputDirection","state","DEATH","AIRDEATH","ATTACK","enemyId","willAttack","ENUM_ENEMY_DEATH","ENUM_OPEN_DOOR","ENUM_RECORD_STEP","willBlock","TOP","ENUM_SHAKE_SCREEN","BOTTOM","LEFT","RIGHT","TURNLEFT","direction","TURNRIGHT","handlerMove","type","tileMgrInfo","mapColumCount","mapRowCount","doorX","doorY","doorState","doorInfo","enemies","filter","enemy","console","log","playerNextY","playerNextX","BLOCKFRONT","weaponNextY","nextPlayerTile","nextWeaponTile","checkBurst","checkBurstCollision","canMove","canTurn","checkDoor","checkCollisionDoor","checkEnemy","checkCollisionEnenies","BLOCKBACK","BLOCKRIGHT","weaponNextX","BLOCKLEFT","nextY","nextX","BLOCKTURNLEFT","i","length","enemyX","enemyY","BLOCKTURNRIGHT","playerNext","weaponNext","bursts","burst","some","index","id","onSmokeHandler","ENUM_SHOW_SMOKE","onAttackShake"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node, Sprite, UITransform, Animation, SpriteAtlas, AnimationClip, animation, SpriteFrame, Texture2D, math } from \"cc\";\nimport { DIRECTION_ENUM, DIRECTION_ORDER_ENUM, ENITIY_TYPE_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT, ENUM_BOTTOM_CONTROLLER, PARAMS_NAME_TYPE, SHAKE_TYPE_ENUM } from \"../../Enum\";\nimport levels, { IEnitiy, ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport ResourceLoadMgr from \"../Base/ResourceLoadMgr\";\nimport DataManager from \"../Runtime/DataManager\";\nimport { TILE_HEIGHT, TILE_WIDTH } from \"../TileMap/TileManager\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\nimport { PlayerStateMachine } from \"./PlayerStateMachine\";\nimport { EnitiyMgr } from \"../Base/EnitiyMgr\";\nimport { EnemyMgr } from \"../Base/EnemyMgr\";\nimport { BurstMgr } from \"../Burst/BurstMgr\";\nimport SoundMgr from \"../Runtime/SoundMgr\";\n\nexport const MOVE_SPEED = 1 / 10\n\nconst { ccclass, property } = _decorator;\n@ccclass('PlayerMrg')\nexport class PlayerMrg extends EnitiyMgr {\n\n    tartgetX: number = 0\n    tartgetY: number = 0\n    isMoving: boolean = false\n\n    async init(params: IEnitiy) {\n        this.fsm = this.addComponent(PlayerStateMachine)\n        await this.fsm.init()\n\n        super.init(params)\n\n        this.tartgetX = this.x\n        this.tartgetY = this.y\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_PLAYER, this.inputHanlder, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_ATTACK_PLAYER, this.onDeathHanlder, this)\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_PLAYER_DEATH, this.onDeathHanlder, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_PLAYER, this.inputHanlder)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_ATTACK_PLAYER, this.onDeathHanlder)\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_PLAYER_DEATH, this.onDeathHanlder)\n    }\n\n    update() {\n        this.updateXY()\n        super.update()\n    }\n\n    updateXY() {\n        if (this.tartgetX < this.x) {\n            this.x -= MOVE_SPEED\n        } else if (this.tartgetX > this.x) {\n            this.x += MOVE_SPEED\n        } else if (this.tartgetY < this.y) {\n            this.y -= MOVE_SPEED\n        } else if (this.tartgetY > this.y) {\n            this.y += MOVE_SPEED\n        }\n\n        if (Math.abs(this.tartgetX - this.x) <= 0.1 && Math.abs(this.tartgetY - this.y) <= 0.1 && this.isMoving) {\n            this.isMoving = false\n            this.x = this.tartgetX\n            this.y = this.tartgetY\n\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n        }\n    }\n\n    inputHanlder(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        if (this.state === ENTITY_STATE_ENUM.DEATH || this.state === ENTITY_STATE_ENUM.AIRDEATH || this.state === ENTITY_STATE_ENUM.ATTACK)\n            return\n\n        if (this.isMoving)\n            return\n\n\n        const enemyId = this.willAttack(inputDirection)\n        if (enemyId) {\n            // SoundMgr.Instance.playSound('sound/attack')\n            this.state = ENTITY_STATE_ENUM.ATTACK\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_ENEMY_DEATH, enemyId)\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_OPEN_DOOR)\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_RECORD_STEP)\n            return\n        }\n\n        if (this.willBlock(inputDirection)) {\n            if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.TOP)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.BOTTOM)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.LEFT) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.LEFT)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.RIGHT) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.RIGHT)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT && this.direction === DIRECTION_ENUM.TOP) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.LEFT)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT && this.direction === DIRECTION_ENUM.LEFT) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.BOTTOM)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT && this.direction === DIRECTION_ENUM.BOTTOM) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.RIGHT)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT && this.direction === DIRECTION_ENUM.RIGHT) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.TOP)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT && this.direction === DIRECTION_ENUM.TOP) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.RIGHT)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT && this.direction === DIRECTION_ENUM.LEFT) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.TOP)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT && this.direction === DIRECTION_ENUM.BOTTOM) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.LEFT)\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT && this.direction === DIRECTION_ENUM.RIGHT) {\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, SHAKE_TYPE_ENUM.BOTTOM)\n            }\n            return\n        }\n\n        this.handlerMove(inputDirection)\n    }\n\n    onDeathHanlder(type: ENTITY_STATE_ENUM) {\n        this.state = type\n        // SoundMgr.Instance.playSound('sound/death')\n    }\n\n    willBlock(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const { tileMgrInfo, mapColumCount, mapRowCount } = DataManager.Instance\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo\n        const enemies: EnemyMgr[] = DataManager.Instance.enemies.filter(enemy => enemy.state != ENTITY_STATE_ENUM.DEATH)\n        console.log('mapColumCount', mapColumCount, 'mapRowCount', mapRowCount)\n        //先判断输入上时候\n        if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP) {\n            console.log('输入向上')\n            const playerNextY = y - 1\n            const playerNextX = x - 1\n            console.log('playerNextY', playerNextY)\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextY < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const weaponNextY = y - 2\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                const checkBurst = this.checkBurstCollision(playerNextY, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextY < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                const checkBurst = this.checkBurstCollision(playerNextY, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextY < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKRIGHT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKRIGHT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextY < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.LEFT) {\n            console.log('输入向走')\n            const playerNextY = y - 1\n            const playerNextX = x - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextX < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextX < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextX < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x - 2\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextX < 0) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n            }\n\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.RIGHT) {\n            console.log('输入向右')\n            const playerNextX = x + 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextX > mapRowCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextX > mapRowCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextX > mapRowCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextX > mapRowCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x + 2\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                const checkBurst = this.checkBurstCollision(playerNextX, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextX, weaponNextX, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n            console.log('输入向下')\n            let playerNextY = y + 1\n\n            console.log('playerNextY', playerNextY)\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                const checkBurst = this.checkBurstCollision(playerNextY, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextY = y + 2\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                const checkBurst = this.checkBurstCollision(playerNextY, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                const checkBurst = this.checkBurstCollision(playerNextY, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (!checkEnemy)\n                    return checkEnemy\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                const checkBurst = this.checkBurstCollision(playerNextY, nextWeaponTile, inputDirection)\n                if (!checkBurst)\n                    return checkBurst\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n                const checkDoor = this.checkCollisionDoor(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkDoor)\n                    return checkDoor\n\n                const checkEnemy = this.checkCollisionEnenies(playerNextY, weaponNextY, ENTITY_STATE_ENUM.BLOCKFRONT, inputDirection)\n                if (checkEnemy)\n                    return checkEnemy\n\n            }\n\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT) {\n            let nextY, nextX\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上左转的话，左上角三个tile都必须turnable为true，并且没有敌人\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y - 1\n                nextX = x + 1\n            }\n\n            //判断门\n            if (\n                ((doorX === x && doorY === nextY) ||\n                    (doorX === nextX && doorY === y) ||\n                    (doorX === nextX && doorY === nextY)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n                return true\n            }\n\n            //判断敌人\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if (enemyX === nextX && enemyY === y) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                } else if (enemyX === nextX && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                } else if (enemyX === x && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n\n                    return true\n                }\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileMgrInfo[x]?.[nextY] || tileMgrInfo[x]?.[nextY].canTurn) &&\n                (!tileMgrInfo[nextX]?.[y] || tileMgrInfo[nextX]?.[y].canTurn) &&\n                (!tileMgrInfo[nextX]?.[nextY] || tileMgrInfo[nextX]?.[nextY].canTurn)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n                return true\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT) {\n            let nextX, nextY\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上右转的话，右上角三个tile都必须turnable为true\n                nextY = y - 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y + 1\n                nextX = x + 1\n            }\n\n            //判断门\n            if (\n                ((doorX === x && doorY === nextY) ||\n                    (doorX === nextX && doorY === y) ||\n                    (doorX === nextX && doorY === nextY)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n                return true\n            }\n\n            //判断敌人\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if (enemyX === nextX && enemyY === y) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                } else if (enemyX === nextX && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                } else if (enemyX === x && enemyY === nextY) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n\n                    return true\n                }\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileMgrInfo[x]?.[nextY] || tileMgrInfo[x]?.[nextY].canTurn) &&\n                (!tileMgrInfo[nextX]?.[y] || tileMgrInfo[nextX]?.[y].canTurn) &&\n                (!tileMgrInfo[nextX]?.[nextY] || tileMgrInfo[nextX]?.[nextY].canTurn)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n                return true\n            }\n\n        }\n\n        return false\n    }\n\n    checkCollisionDoor(playerNext, weaponNext, state: ENTITY_STATE_ENUM, inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.doorInfo\n\n        if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP || inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n            //判断上下门\n            if (\n                ((doorX === x && doorY === playerNext) || (doorX === x && doorY === weaponNext)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = state\n                console.log('撞到了门')\n                return true\n            }\n        } else {\n            //判断左右门\n            if (\n                ((doorX === playerNext && doorY === y) || (doorX === weaponNext && doorY === weaponNext)) &&\n                doorState !== ENTITY_STATE_ENUM.DEATH\n            ) {\n                this.state = state\n                console.log('撞到了门')\n                return true\n            }\n        }\n\n\n\n        return false\n    }\n\n    checkCollisionEnenies(playerNext, weaponNext, state: ENTITY_STATE_ENUM, inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const enemies: EnemyMgr[] = DataManager.Instance.enemies.filter(enemy => enemy.state != ENTITY_STATE_ENUM.DEATH)\n\n        if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP || inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n            for (let i = 0; i < enemies.length; i++) {\n                const enemy = enemies[i]\n                const { x: enemyX, y: enemyY } = enemy\n\n                if ((enemyX === x && enemyY === weaponNext) || (enemyX === x && enemyY === playerNext)) {\n                    this.state = state\n                    console.log('撞到了敌人')\n                    return true\n                }\n            }\n        }\n\n        return false\n    }\n\n    //判断地裂陷阱\n    checkBurstCollision(playerNext, nextWeaponTile, inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const bursts: BurstMgr[] = DataManager.Instance.bursts.filter(\n            (burst: BurstMgr) => burst.state !== ENTITY_STATE_ENUM.DEATH,\n        )\n\n        if (\n            bursts.some(burst => burst.x === x && burst.y === playerNext) &&\n            (!nextWeaponTile || nextWeaponTile.canTurn)\n        ) {\n            return false\n        }\n    }\n\n    willAttack(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        // let enemies = DataManager.Instance.enemies.filter(enemy => enemy.state != ENTITY_STATE_ENUM.DEATH)\n        let enemies = DataManager.Instance.enemies.filter((enemy) => { return enemy.state != ENTITY_STATE_ENUM.DEATH })\n\n        for (let index = 0; index < enemies.length; index++) {\n            const { x: enemyX, y: enemyY, id } = enemies[index];\n            if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP && this.direction === DIRECTION_ENUM.TOP && enemyX == this.x && enemyY == this.y - 2) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM && this.direction === DIRECTION_ENUM.BOTTOM && enemyX == this.x && enemyY == this.y + 2) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.LEFT && this.direction === DIRECTION_ENUM.LEFT && enemyX == this.x - 2 && enemyY == this.y) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.RIGHT && this.direction === DIRECTION_ENUM.RIGHT && enemyX == this.x + 2 && enemyY == this.y) {\n                this.state = ENTITY_STATE_ENUM.ATTACK\n                return id\n            }\n        }\n\n        return ''\n    }\n\n    handlerMove(direction: ENUM_BOTTOM_CONTROLLER) {\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_RECORD_STEP)\n        switch (direction) {\n            case ENUM_BOTTOM_CONTROLLER.TOP:\n                this.isMoving = true\n                this.onSmokeHandler(direction)\n                this.tartgetY -= 1\n                // SoundMgr.Instance.playSound('sound/move')\n                break;\n            case ENUM_BOTTOM_CONTROLLER.BOTTOM:\n                this.isMoving = true\n                this.onSmokeHandler(direction)\n                this.tartgetY += 1\n                // SoundMgr.Instance.playSound('sound/move')\n                break;\n            case ENUM_BOTTOM_CONTROLLER.LEFT:\n                this.isMoving = true\n                this.onSmokeHandler(direction)\n                this.tartgetX -= 1\n                // SoundMgr.Instance.playSound('sound/move')\n                break;\n            case ENUM_BOTTOM_CONTROLLER.RIGHT:\n                this.isMoving = true\n                this.onSmokeHandler(direction)\n                this.tartgetX += 1\n                // SoundMgr.Instance.playSound('sound/move')\n                break;\n            case ENUM_BOTTOM_CONTROLLER.TURNLEFT:\n                // this.fsm.setParams(PARAMS_NAME_TYPE.TURNLEFT, true)\n\n                if (this.direction === DIRECTION_ENUM.TOP) {\n                    this.direction = DIRECTION_ENUM.LEFT\n                } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n                    this.direction = DIRECTION_ENUM.RIGHT\n                } else if (this.direction === DIRECTION_ENUM.LEFT) {\n                    this.direction = DIRECTION_ENUM.BOTTOM\n                } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n                    this.direction = DIRECTION_ENUM.TOP\n                }\n                this.state = ENTITY_STATE_ENUM.TURNLEFT\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n                break;\n            case ENUM_BOTTOM_CONTROLLER.TURNRIGHT:\n                if (this.direction === DIRECTION_ENUM.TOP) {\n                    this.direction = DIRECTION_ENUM.RIGHT\n                } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n                    this.direction = DIRECTION_ENUM.LEFT\n                } else if (this.direction === DIRECTION_ENUM.LEFT) {\n                    this.direction = DIRECTION_ENUM.TOP\n                } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n                    this.direction = DIRECTION_ENUM.BOTTOM\n                }\n                this.state = ENTITY_STATE_ENUM.TURNRIGHT\n                EventMgr.Instance.emit(ENUM_EVENT.ENUM_MOVE_END)\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    onSmokeHandler(type: ENUM_BOTTOM_CONTROLLER) {\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHOW_SMOKE, this.x, this.y, type)\n    }\n\n    onAttackShake(type: SHAKE_TYPE_ENUM) {\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_SHAKE_SCREEN, type)\n    }\n}"]}