{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Scene/UIBattleScene.ts"],"names":["Component","_decorator","DIRECTION_ENUM","ENITIY_TYPE_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","levels","EventMgr","BurstMgr","DoorMgr","IronMgr","WoodenMgr","PlayerMrg","DataManager","TileMapManager","createNewNode","TILE_WIDTH","TILE_HEIGHT","ccclass","property","UIBattleScene","level","stage","start","generateStage","initLevel","onLoad","Instance","addEventListen","ENUM_NEXTLEVEL","nextLevelMap","onDestry","unEventListen","clearLevelMap","levelIndex","mapInfo","mapColumCount","length","mapRowCount","generateTileMap","generateWooden","generateIron","generateDoor","generatePlayer","fitPos","removeAllChildren","reset","stageNode","setParent","node","tileMapNode","tileMapManager","addComponent","init","playerNode","playerManager","x","y","type","PLAYER","state","IDLE","direction","BOTTOM","playerInfo","emit","ENUM_PLAYER_BORN","woodenNode","woodenManager","WOODEN","TOP","enemies","push","generateBurst","burstNode","burstManager","BURST","bursts","ironNode","ironManager","doorNode","doorManager","doorInfo","disX","disY","setPosition"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,U,OAAAA,U;;AACXC,MAAAA,c,iBAAAA,c;AAAgBC,MAAAA,gB,iBAAAA,gB;AAAkBC,MAAAA,iB,iBAAAA,iB;AAAmBC,MAAAA,U,iBAAAA,U;;AACvDC,MAAAA,M;;AACAC,MAAAA,Q;;AACEC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,O,iBAAAA,O;;AACAC,MAAAA,O,iBAAAA,O;;AACAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,S,iBAAAA,S;;AACFC,MAAAA,W;;AAEEC,MAAAA,c,kBAAAA,c;;AACAC,MAAAA,a,kBAAAA,a;;;;;;;;;AAEHC,MAAAA,U,GAAa,E;AACbC,MAAAA,W,GAAc,E;OACd;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBlB,U;;+BAEjBmB,a,WADZF,OAAO,CAAC,eAAD,C,gBAAR,MACaE,aADb,SACmCpB,SADnC,CAC6C;AAAA;AAAA;AAAA,eACzCqB,KADyC;AAAA,eAEzCC,KAFyC;AAAA;;AAGzCC,QAAAA,KAAK,GAAG;AACJ,eAAKC,aAAL;AACA,eAAKC,SAAL;AACH;;AAEDC,QAAAA,MAAM,GAAG;AACL;AAAA;AAAA,oCAASC,QAAT,CAAkBC,cAAlB,CAAiC;AAAA;AAAA,wCAAWC,cAA5C,EAA4D,KAAKC,YAAjE,EAA+E,IAA/E;AACH;;AAEDC,QAAAA,QAAQ,GAAG;AACP;AAAA;AAAA,oCAASJ,QAAT,CAAkBK,aAAlB,CAAgC;AAAA;AAAA,wCAAWH,cAA3C,EAA2D,KAAKC,YAAhE;AACH;;AAEDL,QAAAA,SAAS,GAAG;AACR,eAAKQ,aAAL;AACA,gBAAMZ,KAAK,GAAG;AAAA;AAAA,gCAAQ,QAAO;AAAA;AAAA,0CAAYM,QAAZ,CAAqBO,UAAW,EAA/C,CAAd;;AACA,cAAIb,KAAJ,EAAW;AACP;AAAA;AAAA,4CAAYM,QAAZ,CAAqBQ,OAArB,GAA+Bd,KAAK,CAACc,OAArC;AACA;AAAA;AAAA,4CAAYR,QAAZ,CAAqBS,aAArB,GAAqCf,KAAK,CAACc,OAAN,CAAc,CAAd,EAAiBE,MAAtD,CAFO,CAEsD;;AAC7D;AAAA;AAAA,4CAAYV,QAAZ,CAAqBW,WAArB,GAAmCjB,KAAK,CAACc,OAAN,CAAcE,MAAjD;AACH;;AAED,eAAKE,eAAL,GATQ,CAUR;;AACA,eAAKC,cAAL;AACA,eAAKC,YAAL;AACA,eAAKC,YAAL;AACA,eAAKC,cAAL;AACA,eAAKC,MAAL;AACH;;AAEDd,QAAAA,YAAY,GAAG;AACX;AAAA;AAAA,0CAAYH,QAAZ,CAAqBO,UAArB;AACA,eAAKT,SAAL;AACH;;AAEDQ,QAAAA,aAAa,GAAG;AACZ,eAAKX,KAAL,CAAWuB,iBAAX;AACA;AAAA;AAAA,0CAAYlB,QAAZ,CAAqBmB,KAArB;AACH;;AAEDtB,QAAAA,aAAa,GAAG;AACZ,gBAAMuB,SAAS,GAAG;AAAA;AAAA,+CAAlB;AACAA,UAAAA,SAAS,CAACC,SAAV,CAAoB,KAAKC,IAAzB;AACA,eAAK3B,KAAL,GAAayB,SAAb;AACH;;AAEoB,cAAfR,eAAe,GAAG;AACpB,gBAAMW,WAAW,GAAG;AAAA;AAAA,+CAApB;AACAA,UAAAA,WAAW,CAACF,SAAZ,CAAsB,KAAK1B,KAA3B;AACA,gBAAM6B,cAAc,GAAGD,WAAW,CAACE,YAAZ;AAAA;AAAA,+CAAvB;AACA,gBAAMD,cAAc,CAACE,IAAf,EAAN;AACH;;AAEmB,cAAdV,cAAc,GAAG;AACnB,gBAAMW,UAAU,GAAG;AAAA;AAAA,+CAAnB;AACAA,UAAAA,UAAU,CAACN,SAAX,CAAqB,KAAK1B,KAA1B;AACA,gBAAMiC,aAAa,GAAGD,UAAU,CAACF,YAAX;AAAA;AAAA,qCAAtB;AACA,gBAAMG,aAAa,CAACF,IAAd,CAAmB;AACrBG,YAAAA,CAAC,EAAE,CADkB;AAErBC,YAAAA,CAAC,EAAE,CAFkB;AAGrBC,YAAAA,IAAI,EAAE;AAAA;AAAA,sDAAiBC,MAHF;AAIrBC,YAAAA,KAAK,EAAE;AAAA;AAAA,wDAAkBC,IAJJ;AAKrBC,YAAAA,SAAS,EAAE;AAAA;AAAA,kDAAeC;AALL,WAAnB,CAAN;AAOA;AAAA;AAAA,0CAAYpC,QAAZ,CAAqBqC,UAArB,GAAkCT,aAAlC;AACA;AAAA;AAAA,oCAAS5B,QAAT,CAAkBsC,IAAlB,CAAuB;AAAA;AAAA,wCAAWC,gBAAlC;AACH;;AAEmB,cAAd1B,cAAc,GAAG;AACnB,gBAAM2B,UAAU,GAAG;AAAA;AAAA,+CAAnB;AACAA,UAAAA,UAAU,CAACnB,SAAX,CAAqB,KAAK1B,KAA1B;AACA,gBAAM8C,aAAa,GAAGD,UAAU,CAACf,YAAX;AAAA;AAAA,qCAAtB;AACA,gBAAMgB,aAAa,CAACf,IAAd,CAAmB;AACrBG,YAAAA,CAAC,EAAE,CADkB;AAErBC,YAAAA,CAAC,EAAE,CAFkB;AAGrBC,YAAAA,IAAI,EAAE;AAAA;AAAA,sDAAiBW,MAHF;AAIrBT,YAAAA,KAAK,EAAE;AAAA;AAAA,wDAAkBC,IAJJ;AAKrBC,YAAAA,SAAS,EAAE;AAAA;AAAA,kDAAeQ;AALL,WAAnB,CAAN;AAOA;AAAA;AAAA,0CAAY3C,QAAZ,CAAqB4C,OAArB,CAA6BC,IAA7B,CAAkCJ,aAAlC;AACH;;AAEkB,cAAbK,aAAa,GAAG;AAClB,gBAAMC,SAAS,GAAG;AAAA;AAAA,+CAAlB;AACAA,UAAAA,SAAS,CAAC1B,SAAV,CAAoB,KAAK1B,KAAzB;AACA,gBAAMqD,YAAY,GAAGD,SAAS,CAACtB,YAAV;AAAA;AAAA,mCAArB;AACA,gBAAMuB,YAAY,CAACtB,IAAb,CAAkB;AACpBG,YAAAA,CAAC,EAAE,CADiB;AAEpBC,YAAAA,CAAC,EAAE,CAFiB;AAGpBC,YAAAA,IAAI,EAAE;AAAA;AAAA,sDAAiBkB,KAHH;AAIpBhB,YAAAA,KAAK,EAAE;AAAA;AAAA,wDAAkBC,IAJL;AAKpBC,YAAAA,SAAS,EAAE;AAAA;AAAA,kDAAeQ;AALN,WAAlB,CAAN;AAOA;AAAA;AAAA,0CAAY3C,QAAZ,CAAqBkD,MAArB,CAA4BL,IAA5B,CAAiCG,YAAjC;AACH;;AAEiB,cAAZlC,YAAY,GAAG;AACjB,gBAAMqC,QAAQ,GAAG;AAAA;AAAA,+CAAjB;AACAA,UAAAA,QAAQ,CAAC9B,SAAT,CAAmB,KAAK1B,KAAxB;AACA,gBAAMyD,WAAW,GAAGD,QAAQ,CAAC1B,YAAT;AAAA;AAAA,iCAApB;AACA,gBAAM2B,WAAW,CAAC1B,IAAZ,CAAiB;AACnBG,YAAAA,CAAC,EAAE,CADgB;AAEnBC,YAAAA,CAAC,EAAE,CAFgB;AAGnBC,YAAAA,IAAI,EAAE;AAAA;AAAA,sDAAiBW,MAHJ;AAInBT,YAAAA,KAAK,EAAE;AAAA;AAAA,wDAAkBC,IAJN;AAKnBC,YAAAA,SAAS,EAAE;AAAA;AAAA,kDAAeC;AALP,WAAjB,CAAN;AAOA;AAAA;AAAA,0CAAYpC,QAAZ,CAAqB4C,OAArB,CAA6BC,IAA7B,CAAkCO,WAAlC;AACH;;AAEiB,cAAZrC,YAAY,GAAG;AACjB,gBAAMsC,QAAQ,GAAG;AAAA;AAAA,+CAAjB;AACAA,UAAAA,QAAQ,CAAChC,SAAT,CAAmB,KAAK1B,KAAxB;AACA,gBAAM2D,WAAW,GAAGD,QAAQ,CAAC5B,YAAT;AAAA;AAAA,iCAApB;AACA,gBAAM6B,WAAW,CAAC5B,IAAZ,EAAN;AACA;AAAA;AAAA,0CAAY1B,QAAZ,CAAqBuD,QAArB,GAAgCD,WAAhC;AACH;;AAEDrC,QAAAA,MAAM,GAAG;AACL,gBAAM;AAAER,YAAAA,aAAF;AAAiBE,YAAAA;AAAjB,cAAiC;AAAA;AAAA,0CAAYX,QAAnD;AACA,gBAAMwD,IAAI,GAAGnE,UAAU,GAAGsB,WAAb,GAA2B,CAAxC;AACA,gBAAM8C,IAAI,GAAGnE,WAAW,GAAGmB,aAAd,GAA8B,CAA9B,GAAkC,GAA/C;AACA,eAAKd,KAAL,CAAW+D,WAAX,CAAuB,CAACF,IAAxB,EAA8BC,IAA9B;AACH;;AA/HwC,O","sourcesContent":["import { Component, _decorator, Node } from \"cc\";\nimport { DIRECTION_ENUM, ENITIY_TYPE_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT } from \"../../Enum\";\nimport levels, { ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport { BurstMgr } from \"../Burst/BurstMgr\";\nimport { DoorMgr } from \"../Door/DoorMgr\";\nimport { IronMgr } from \"../Enemy/Iron/IronMgr\";\nimport { WoodenMgr } from \"../Enemy/Wooden/WoodenMgr\";\nimport { PlayerMrg } from \"../Player/PlayerMgr\";\nimport DataManager from \"../Runtime/DataManager\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\n\nconst TILE_WIDTH = 55\nconst TILE_HEIGHT = 55\nconst { ccclass, property } = _decorator;\n@ccclass('UIBattleScene')\nexport class UIBattleScene extends Component {\n    level: ILevel\n    stage: Node\n    start() {\n        this.generateStage()\n        this.initLevel()\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_NEXTLEVEL, this.nextLevelMap)\n    }\n\n    initLevel() {\n        this.clearLevelMap()\n        const level = levels[`level${DataManager.Instance.levelIndex}`]\n        if (level) {\n            DataManager.Instance.mapInfo = level.mapInfo\n            DataManager.Instance.mapColumCount = level.mapInfo[0].length //åˆ—\n            DataManager.Instance.mapRowCount = level.mapInfo.length\n        }\n\n        this.generateTileMap()\n        // this.generateBurst()\n        this.generateWooden()\n        this.generateIron()\n        this.generateDoor()\n        this.generatePlayer()\n        this.fitPos()\n    }\n\n    nextLevelMap() {\n        DataManager.Instance.levelIndex++\n        this.initLevel()\n    }\n\n    clearLevelMap() {\n        this.stage.removeAllChildren()\n        DataManager.Instance.reset()\n    }\n\n    generateStage() {\n        const stageNode = createNewNode()\n        stageNode.setParent(this.node)\n        this.stage = stageNode\n    }\n\n    async generateTileMap() {\n        const tileMapNode = createNewNode()\n        tileMapNode.setParent(this.stage)\n        const tileMapManager = tileMapNode.addComponent(TileMapManager)\n        await tileMapManager.init()\n    }\n\n    async generatePlayer() {\n        const playerNode = createNewNode()\n        playerNode.setParent(this.stage)\n        const playerManager = playerNode.addComponent(PlayerMrg)\n        await playerManager.init({\n            x: 7,\n            y: 2,\n            type: ENITIY_TYPE_ENUM.PLAYER,\n            state: ENTITY_STATE_ENUM.IDLE,\n            direction: DIRECTION_ENUM.BOTTOM\n        })\n        DataManager.Instance.playerInfo = playerManager\n        EventMgr.Instance.emit(ENUM_EVENT.ENUM_PLAYER_BORN)\n    }\n\n    async generateWooden() {\n        const woodenNode = createNewNode()\n        woodenNode.setParent(this.stage)\n        const woodenManager = woodenNode.addComponent(WoodenMgr)\n        await woodenManager.init({\n            x: 7,\n            y: 7,\n            type: ENITIY_TYPE_ENUM.WOODEN,\n            state: ENTITY_STATE_ENUM.IDLE,\n            direction: DIRECTION_ENUM.TOP\n        })\n        DataManager.Instance.enemies.push(woodenManager)\n    }\n\n    async generateBurst() {\n        const burstNode = createNewNode()\n        burstNode.setParent(this.stage)\n        const burstManager = burstNode.addComponent(BurstMgr)\n        await burstManager.init({\n            x: 7,\n            y: 4,\n            type: ENITIY_TYPE_ENUM.BURST,\n            state: ENTITY_STATE_ENUM.IDLE,\n            direction: DIRECTION_ENUM.TOP\n        })\n        DataManager.Instance.bursts.push(burstManager)\n    }\n\n    async generateIron() {\n        const ironNode = createNewNode()\n        ironNode.setParent(this.stage)\n        const ironManager = ironNode.addComponent(IronMgr)\n        await ironManager.init({\n            x: 2,\n            y: 4,\n            type: ENITIY_TYPE_ENUM.WOODEN,\n            state: ENTITY_STATE_ENUM.IDLE,\n            direction: DIRECTION_ENUM.BOTTOM\n        })\n        DataManager.Instance.enemies.push(ironManager)\n    }\n\n    async generateDoor() {\n        const doorNode = createNewNode()\n        doorNode.setParent(this.stage)\n        const doorManager = doorNode.addComponent(DoorMgr)\n        await doorManager.init()\n        DataManager.Instance.doorInfo = doorManager\n    }\n\n    fitPos() {\n        const { mapColumCount, mapRowCount } = DataManager.Instance\n        const disX = TILE_WIDTH * mapRowCount / 2\n        const disY = TILE_HEIGHT * mapColumCount / 2 + 100\n        this.stage.setPosition(-disX, disY)\n    }\n}"]}