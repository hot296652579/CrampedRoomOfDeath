{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Player/PlayerMgr.ts"],"names":["_decorator","DIRECTION_ENUM","ENITIY_TYPE_ENUM","ENTITY_STATE_ENUM","ENUM_EVENT","ENUM_BOTTOM_CONTROLLER","EventMgr","DataManager","PlayerStateMachine","EnitiyMgr","MOVE_SPEED","ccclass","property","PlayerMrg","tartgetX","tartgetY","init","fsm","addComponent","x","y","type","PLAYER","state","IDLE","direction","TOP","onLoad","Instance","addEventListen","ENUM_MOVE_PLAYER","inputHanlder","onDestry","unEventListen","update","updateXY","Math","abs","inputDirection","willBlock","console","log","handlerMove","tileMgrInfo","mapColumCount","mapRowCount","playerNextY","BLOCKFRONT","weaponNextY","nextPlayerTile","nextWeaponTile","canMove","canTurn","BOTTOM","BLOCKBACK","LEFT","BLOCKRIGHT","weaponNextX","RIGHT","BLOCKLEFT","playerNextX","TURNLEFT","nextY","nextX","BLOCKTURNLEFT","TURNRIGHT","BLOCKTURNRIGHT"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node, Sprite, UITransform, Animation, SpriteAtlas, AnimationClip, animation, SpriteFrame, Texture2D, math } from \"cc\";\nimport { DIRECTION_ENUM, DIRECTION_ORDER_ENUM, ENITIY_TYPE_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT, ENUM_BOTTOM_CONTROLLER, PARAMS_NAME_TYPE } from \"../../Enum\";\nimport levels, { ILevel } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport ResourceLoadMgr from \"../Base/ResourceLoadMgr\";\nimport DataManager from \"../Runtime/DataManager\";\nimport { TILE_HEIGHT, TILE_WIDTH } from \"../TileMap/TileManager\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode } from \"../Utils\";\nimport { PlayerStateMachine } from \"../Base/PlayerStateMachine\";\nimport { EnitiyMgr } from \"../Base/EnitiyMgr\";\n\nexport const MOVE_SPEED = 1 / 10\n\nconst { ccclass, property } = _decorator;\n@ccclass('PlayerMrg')\nexport class PlayerMrg extends EnitiyMgr {\n\n    tartgetX: number = 0\n    tartgetY: number = 0\n\n    async init() {\n        this.fsm = this.addComponent(PlayerStateMachine)\n        await this.fsm.init()\n\n        super.init({\n            x: 2,\n            y: 8,\n            type: ENITIY_TYPE_ENUM.PLAYER,\n            state: ENTITY_STATE_ENUM.IDLE,\n            direction: DIRECTION_ENUM.TOP\n        })\n\n        this.tartgetX = this.x\n        this.tartgetY = this.y\n    }\n\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_PLAYER, this.inputHanlder, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_PLAYER, this.inputHanlder)\n    }\n\n    update() {\n        this.updateXY()\n        super.update()\n    }\n\n    updateXY() {\n        if (this.tartgetX < this.x) {\n            this.x -= MOVE_SPEED\n        } else if (this.tartgetX > this.x) {\n            this.x += MOVE_SPEED\n        } else if (this.tartgetY < this.y) {\n            this.y -= MOVE_SPEED\n        } else if (this.tartgetY > this.y) {\n            this.y += MOVE_SPEED\n        }\n\n        if (Math.abs(this.tartgetX - this.x) <= 0.1 && Math.abs(this.tartgetY - this.y) <= 0.1) {\n            this.x = this.tartgetX\n            this.y = this.tartgetY\n        }\n    }\n\n    inputHanlder(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        if (this.willBlock(inputDirection)) {\n            console.log('block!!!!')\n            return\n        }\n\n        this.handlerMove(inputDirection)\n    }\n\n    willBlock(inputDirection: ENUM_BOTTOM_CONTROLLER) {\n        const { tartgetX: x, tartgetY: y, direction } = this\n        const { tileMgrInfo, mapColumCount, mapRowCount } = DataManager.Instance\n\n        console.log('y', y)\n\n        //先判断输入上时候\n        if (inputDirection === ENUM_BOTTOM_CONTROLLER.TOP) {\n            const playerNextY = y - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextY <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                const weaponNextY = y - 2\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextY <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextY <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextY <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.LEFT) {\n            const playerNextX = x - 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                //判断是否超出地图\n                if (playerNextX <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                //判断是否超出地图\n                if (playerNextX <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                //判断是否超出地图\n                if (playerNextX <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x - 2\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                //判断是否超出地图\n                if (playerNextX <= 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n            }\n\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.RIGHT) {\n            const playerNextX = x + 1\n\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y - 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n\n                    return true\n                }\n\n                const weaponNextX = x\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextX > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextX = x + 2\n                const nextPlayerTile = tileMgrInfo[playerNextX]?.[y]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[y]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.BOTTOM) {\n            const playerNextY = y + 1\n            //玩家方向——向上\n            if (direction === DIRECTION_ENUM.TOP) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                const weaponNextY = y\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKBACK\n                    return true\n                }\n\n                //玩家方向——向下\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n\n                    return true\n                }\n\n                const weaponNextY = y + 2\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[x]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKFRONT\n                    return true\n                }\n\n                //玩家方向——向左\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n\n                    return true\n                }\n\n                const weaponNextX = x - 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKLEFT\n                    return true\n                }\n\n                //玩家方向——向右\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                if (playerNextY > mapColumCount - 1) {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n\n                    return true\n                }\n\n                const weaponNextX = x + 1\n                const weaponNextY = y + 1\n                const nextPlayerTile = tileMgrInfo[x]?.[playerNextY]\n                const nextWeaponTile = tileMgrInfo[weaponNextX]?.[weaponNextY]\n\n                //最后判断地图元素\n                if (nextPlayerTile && nextPlayerTile.canMove && (!nextWeaponTile || nextWeaponTile.canTurn)) {\n                    // empty\n                } else {\n                    this.state = ENTITY_STATE_ENUM.BLOCKRIGHT\n                    return true\n                }\n            }\n\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNLEFT) {\n            let nextY, nextX\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上左转的话，左上角三个tile都必须turnable为true，并且没有敌人\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y - 1\n                nextX = x + 1\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileMgrInfo[x]?.[nextY] || tileMgrInfo[x]?.[nextY].canTurn) &&\n                (!tileMgrInfo[nextX]?.[y] || tileMgrInfo[nextX]?.[y].canTurn) &&\n                (!tileMgrInfo[nextX]?.[nextY] || tileMgrInfo[nextX]?.[nextY].canTurn)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNLEFT\n                return true\n            }\n        } else if (inputDirection === ENUM_BOTTOM_CONTROLLER.TURNRIGHT) {\n            let nextX, nextY\n            if (direction === DIRECTION_ENUM.TOP) {\n                //朝上右转的话，右上角三个tile都必须turnable为true\n                nextY = y - 1\n                nextX = x + 1\n            } else if (direction === DIRECTION_ENUM.BOTTOM) {\n                nextY = y + 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.LEFT) {\n                nextY = y - 1\n                nextX = x - 1\n            } else if (direction === DIRECTION_ENUM.RIGHT) {\n                nextY = y + 1\n                nextX = x + 1\n            }\n\n            //最后判断地图元素\n            if (\n                (!tileMgrInfo[x]?.[nextY] || tileMgrInfo[x]?.[nextY].canTurn) &&\n                (!tileMgrInfo[nextX]?.[y] || tileMgrInfo[nextX]?.[y].canTurn) &&\n                (!tileMgrInfo[nextX]?.[nextY] || tileMgrInfo[nextX]?.[nextY].canTurn)\n            ) {\n                // empty\n            } else {\n                this.state = ENTITY_STATE_ENUM.BLOCKTURNRIGHT\n                return true\n            }\n        }\n\n        return false\n    }\n\n    handlerMove(direction: ENUM_BOTTOM_CONTROLLER) {\n        console.log(DataManager.Instance.tileMgrInfo)\n        switch (direction) {\n            case ENUM_BOTTOM_CONTROLLER.TOP:\n                this.tartgetY -= 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.BOTTOM:\n                this.tartgetY += 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.LEFT:\n                this.tartgetX -= 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.RIGHT:\n                this.tartgetX += 1\n                break;\n            case ENUM_BOTTOM_CONTROLLER.TURNLEFT:\n                // this.fsm.setParams(PARAMS_NAME_TYPE.TURNLEFT, true)\n\n                if (this.direction === DIRECTION_ENUM.TOP) {\n                    this.direction = DIRECTION_ENUM.LEFT\n                } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n                    this.direction = DIRECTION_ENUM.RIGHT\n                } else if (this.direction === DIRECTION_ENUM.LEFT) {\n                    this.direction = DIRECTION_ENUM.BOTTOM\n                } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n                    this.direction = DIRECTION_ENUM.TOP\n                }\n                this.state = ENTITY_STATE_ENUM.TURNLEFT\n                break;\n            case ENUM_BOTTOM_CONTROLLER.TURNRIGHT:\n                if (this.direction === DIRECTION_ENUM.TOP) {\n                    this.direction = DIRECTION_ENUM.RIGHT\n                } else if (this.direction === DIRECTION_ENUM.BOTTOM) {\n                    this.direction = DIRECTION_ENUM.LEFT\n                } else if (this.direction === DIRECTION_ENUM.LEFT) {\n                    this.direction = DIRECTION_ENUM.TOP\n                } else if (this.direction === DIRECTION_ENUM.RIGHT) {\n                    this.direction = DIRECTION_ENUM.BOTTOM\n                }\n                this.state = ENTITY_STATE_ENUM.TURNRIGHT\n                break;\n\n            default:\n                break;\n        }\n    }\n}"]}