{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Player/State.ts"],"names":["Sate","animation","AnimationClip","Sprite","SpriteAtlas","ResourceLoadMgr","ANIMATION_SPEED","constructor","fsm","path","isLoop","WrapMode","Normal","animationClip","init","promise","Instance","loadRes","waitList","push","spriteAtlas","track","ObjectTrack","TrackPath","toComponent","toProperty","spFrames","spriteFrames","frams","index","key","Object","prototype","hasOwnProperty","call","element","console","log","channel","curve","assignSorted","addTrack","name","wrapMode","duration","length","run","animationCom","defaultClip","play"],"mappings":";;;+IASqBA,I;;;;;;;;;;;;;;;;;;;AATZC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,a,OAAAA,a;AAAeC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;;AACpCC,MAAAA,e;;;;;;;;;AAIDC,MAAAA,e,GAAkB,IAAI,C;AAG5B;;yBACqBN,I,GAAN,MAAMA,IAAN,CAAW;AAEtBO,QAAAA,WAAW,CAASC,GAAT,EAAoCC,IAApC,EAA0DC,MAA8B,GAAGR,aAAa,CAACS,QAAd,CAAuBC,MAAlH,EAA0H;AAAA,eADrIC,aACqI;AAAA,eAAjHL,GAAiH,GAAjHA,GAAiH;AAAA,eAAtFC,IAAsF,GAAtFA,IAAsF;AAAA,eAAhEC,MAAgE,GAAhEA,MAAgE;AACjI,eAAKI,IAAL;AACH;;AAES,cAAJA,IAAI,GAAG;AACT,gBAAMC,OAAO,GAAG;AAAA;AAAA,kDAAgBC,QAAhB,CAAyBC,OAAzB,CAAiC,KAAKR,IAAtC,EAA4CL,WAA5C,CAAhB;AACA,eAAKI,GAAL,CAASU,QAAT,CAAkBC,IAAlB,CAAuBJ,OAAvB;AACA,gBAAMK,WAAW,GAAG,MAAML,OAA1B;AACA,eAAKF,aAAL,GAAqB,IAAIX,aAAJ,EAArB;AAEA,gBAAMmB,KAAK,GAAG,IAAIpB,SAAS,CAACqB,WAAd,EAAd,CANS,CAMkC;;AAC3CD,UAAAA,KAAK,CAACZ,IAAN,GAAa,IAAIR,SAAS,CAACsB,SAAd,GAA0BC,WAA1B,CAAsCrB,MAAtC,EAA8CsB,UAA9C,CAAyD,aAAzD,CAAb,CAPS,CAO6E;;AAEtF,gBAAMC,QAAQ,GAAGN,WAAW,CAACO,YAA7B;AACA,gBAAMC,KAAmC,GAAG,EAA5C;AAEA,cAAIC,KAAK,GAAG,CAAZ;;AACA,eAAK,MAAMC,GAAX,IAAkBJ,QAAlB,EAA4B;AACxB,gBAAIK,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,QAArC,EAA+CI,GAA/C,CAAJ,EAAyD;AACrD,oBAAMK,OAAO,GAAGT,QAAQ,CAACI,GAAD,CAAxB;AACAF,cAAAA,KAAK,CAACT,IAAN,CAAW,CAACb,eAAe,GAAGuB,KAAnB,EAA0BM,OAA1B,CAAX;AACAN,cAAAA,KAAK;AACR;AACJ;;AACDO,UAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACAP,UAAAA,KAAK,CAACiB,OAAN,CAAcC,KAAd,CAAoBC,YAApB,CAAiCZ,KAAjC,EArBS,CAuBT;;AACA,eAAKf,aAAL,CAAmB4B,QAAnB,CAA4BpB,KAA5B;AACA,eAAKR,aAAL,CAAmB6B,IAAnB,GAA0B,KAAKjC,IAA/B;AACA,eAAKI,aAAL,CAAmB8B,QAAnB,GAA8B,KAAKjC,MAAnC;AACA,eAAKG,aAAL,CAAmB+B,QAAnB,GAA8BhB,KAAK,CAACiB,MAAN,GAAevC,eAA7C,CA3BS,CA2BqD;AACjE;;AAEDwC,QAAAA,GAAG,GAAG;AACF,eAAKtC,GAAL,CAASuC,YAAT,CAAsBC,WAAtB,GAAoC,KAAKnC,aAAzC;AACA,eAAKL,GAAL,CAASuC,YAAT,CAAsBE,IAAtB;AACH;;AAvCqB,O","sourcesContent":["import { animation, AnimationClip, Sprite, SpriteAtlas, SpriteFrame } from \"cc\";\nimport ResourceLoadMgr from \"../Base/ResourceLoadMgr\";\nimport { PlayerStateMachine } from \"./PlayerStateMachine\";\nimport { StateMachine } from \"./SateMachine\";\n\nconst ANIMATION_SPEED = 1 / 8\n\n\n/**真正播动画的地方*/\nexport default class Sate {\n    animationClip: AnimationClip\n    constructor(private fsm: StateMachine, private path: string, private isLoop: AnimationClip.WrapMode = AnimationClip.WrapMode.Normal) {\n        this.init()\n    }\n\n    async init() {\n        const promise = ResourceLoadMgr.Instance.loadRes(this.path, SpriteAtlas)\n        this.fsm.waitList.push(promise)\n        const spriteAtlas = await promise\n        this.animationClip = new AnimationClip();\n\n        const track = new animation.ObjectTrack(); // 创建一个对象轨道\n        track.path = new animation.TrackPath().toComponent(Sprite).toProperty('spriteFrame'); // 找子节点组件 以及属性\n\n        const spFrames = spriteAtlas.spriteFrames\n        const frams: Array<[number, SpriteFrame]> = []\n\n        let index = 0\n        for (const key in spFrames) {\n            if (Object.prototype.hasOwnProperty.call(spFrames, key)) {\n                const element = spFrames[key];\n                frams.push([ANIMATION_SPEED * index, element])\n                index++\n            }\n        }\n        console.log(frams)\n        track.channel.curve.assignSorted(frams)\n\n        // // 最后将轨道添加到动画剪辑以应用\n        this.animationClip.addTrack(track)\n        this.animationClip.name = this.path\n        this.animationClip.wrapMode = this.isLoop\n        this.animationClip.duration = frams.length * ANIMATION_SPEED; // 整个动画剪辑的周期\n    }\n\n    run() {\n        this.fsm.animationCom.defaultClip = this.animationClip\n        this.fsm.animationCom.play()\n    }\n}"]}