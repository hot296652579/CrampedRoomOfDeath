{"version":3,"sources":["file:///Users/super_javan/cocoscreator/CrampedRoomOfDeathDungeon/assets/Scripts/Spikes/SpikesMgr.ts"],"names":["Component","_decorator","Sprite","UITransform","ENTITY_STATE_ENUM","ENUM_EVENT","PARAMS_NAME_TYPE","SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM","EventMgr","DataManager","TILE_HEIGHT","TILE_WIDTH","randomNameByLen","SpikeStateMachine","MOVE_SPEED","ccclass","property","SpikesMgr","id","x","y","fsm","_count","_totalCount","_state","_type","count","newCount","setParams","SPIKES_CUR_COUNT","totalCount","newTotalCount","SPIKES_TOTAL_COUNT","init","params","sprite","addComponent","sizeMode","SizeMode","CUSTOM","transform","node","getComponent","setContentSize","type","onChangeCount","onAttack","countToZero","Instance","playerInfo","playerX","playerY","emit","ENUM_PLAYER_DEATH","DEATH","onLoad","addEventListen","ENUM_MOVE_END","onDestry","unEventListen","update","setPosition"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node, Sprite, UITransform, Animation, SpriteAtlas, AnimationClip, animation, SpriteFrame, Texture2D, math } from \"cc\";\nimport { DIRECTION_ENUM, DIRECTION_ORDER_ENUM, ENITIY_TYPE_ENUM, ENTITY_STATE_ENUM, ENUM_EVENT, ENUM_BOTTOM_CONTROLLER, PARAMS_NAME_TYPE, ENITIY_TYPE_SPIKES_ENUM, SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM } from \"../../Enum\";\nimport levels, { IEnitiy, ILevel, ISpike } from \"../../Levels\";\nimport EventMgr from \"../Base/EventMgr\";\nimport ResourceLoadMgr from \"../Base/ResourceLoadMgr\";\nimport DataManager from \"../Runtime/DataManager\";\nimport { TILE_HEIGHT, TILE_WIDTH } from \"../TileMap/TileManager\";\n// import { DataManager.Instance } from \"../Runtime/DataManager\";\nimport { TileMapManager } from \"../TileMap/TileMapManager\";\nimport { createNewNode, randomNameByLen } from \"../Utils\";\nimport { PlayerStateMachine } from \"../Player/PlayerStateMachine\";\nimport { StateMachine } from \"../Base/SateMachine\";\nimport { SpikeStateMachine } from \"./SpikeStateMachine\";\n\nexport const MOVE_SPEED = 1 / 10\n\nconst { ccclass, property } = _decorator;\n@ccclass('SpikesMgr')\nexport class SpikesMgr extends Component {\n    id: string = randomNameByLen(12)\n    x: number = 0\n    y: number = 0\n\n    fsm: StateMachine = null\n\n    private _count: number\n    private _totalCount: number\n\n    private _state: ENTITY_STATE_ENUM\n    private _type: ENITIY_TYPE_SPIKES_ENUM\n\n    get count() {\n        return this._count\n    }\n    set count(newCount) {\n        this._count = newCount\n        this.fsm.setParams(PARAMS_NAME_TYPE.SPIKES_CUR_COUNT, newCount)\n    }\n\n    get totalCount() {\n        return this._totalCount\n    }\n    set totalCount(newTotalCount) {\n        this._totalCount = newTotalCount\n        this.fsm.setParams(PARAMS_NAME_TYPE.SPIKES_TOTAL_COUNT, newTotalCount)\n    }\n\n    async init(params: ISpike) {\n        const sprite = this.addComponent(Sprite)\n        sprite.sizeMode = Sprite.SizeMode.CUSTOM\n        const transform = this.node.getComponent(UITransform)\n        transform.setContentSize(TILE_WIDTH * 4, TILE_HEIGHT * 4)\n\n        this.fsm = this.addComponent(SpikeStateMachine)\n        await this.fsm.init()\n\n        this.x = params.x\n        this.y = params.y\n\n        this._type = params.type\n        this.totalCount = SPIKES_TYPE_MAP_TOTAL_COUNT_ENUM[this._type]\n        this.count = params.count\n    }\n    onChangeCount() {\n        if (this.count === this.totalCount) {\n            this.count = 1\n        } else {\n            this.count++\n        }\n\n        this.onAttack()\n    }\n\n    countToZero() {\n        this.count = 0\n    }\n\n    onAttack() {\n        if (!DataManager.Instance.playerInfo)\n            return\n\n        const { x: playerX, y: playerY } = DataManager.Instance.playerInfo\n        if (this.x === playerX && this.y === playerY && this.count === this.totalCount) {\n            EventMgr.Instance.emit(ENUM_EVENT.ENUM_PLAYER_DEATH, ENTITY_STATE_ENUM.DEATH)\n        }\n    }\n    onLoad() {\n        EventMgr.Instance.addEventListen(ENUM_EVENT.ENUM_MOVE_END, this.onChangeCount, this)\n    }\n\n    onDestry() {\n        EventMgr.Instance.unEventListen(ENUM_EVENT.ENUM_MOVE_END, this.onChangeCount)\n    }\n\n    update() {\n        this.node.setPosition(this.x * TILE_WIDTH - TILE_WIDTH * 1.5, -this.y * TILE_HEIGHT + TILE_HEIGHT * 1.5)\n    }\n}"]}